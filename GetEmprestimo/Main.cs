/***************************************************************
    *  DO NOT EDIT THIS FILE!
    *         
    *  This file is automatically generated by HP Service Test.
    *  Manually changing the contents of this file may result in 
    *  loss of information.
    *          
    *  To edit the test, open the file ‘GetEmprestimo.st’ 
    *  in HP Service Test.
     ***************************************************************/
    
    namespace Script
    {
    using System;
    using System.Text;
    using System.Threading;
    using System.Xml;
    using System.Xml.Schema;
    using HP.ST.Fwk.ReporterFWK;
    using HP.ST.Shared.Utilities;
    using HP.ST.Ext.BindingImpl.Getters;
    using HP.ST.Ext.BindingImpl.Setters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.PropInfo;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Getters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Setters;
    using HP.ST.Fwk.RunTimeFWK;
    using HP.ST.Fwk.RunTimeFWK.Utilities;
    using HP.ST.Fwk.RunTimeFWK.HelperClasses;
    using HP.ST.Fwk.RunTimeFWK.CompositeActivities;
    using HP.ST.Ext.BindingImpl.Setters.DataSourceSetters;
    using HP.ST.Fwk.JVMLoader;
    using System.IO;
    using System.Collections.Generic;
    using System.Reflection;
    using HP.ST.Fwk.SOAReplayAPI;
    using HP.ST.Fwk.UFTLicensing;
    
    
    
    public partial class WorkFlowScript : STWorkFlowScriptBase
    {    
    	TestUserCode _userCode = null;
    	TestEntities _flow = null;
    	static Reporter reporter;
    	int reportLevelInTree;
        HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator reportCreator;
    	
    	public BindDirection bind_dir457 = null;
        public BindDirection bind_dir458 = null;
        public BindDirection bind_dir459 = null;
        public BindDirection bind_dir460 = null;
        public HP.ST.Ext.BasicActivities.DataCursorActivity DataCursorActivity17 = null;
        public BindDirection bind_dir461 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy DataCursorActivity17_Policy = null;
        public BindDirection bind_dir462 = null;
        public BindDirection bind_dir463 = null;
        public BindDirection bind_dir464 = null;
        public BindDirection bind_dir465 = null;
        public BindDirection bind_dir466 = null;
        public BindDirection bind_dir467 = null;
        public BindDirection bind_dir468 = null;
        public BindDirection bind_dir469 = null;
        public BindDirection bind_dir470 = null;
        public BindDirection bind_dir471 = null;
        public BindDirection bind_dir472 = null;
        public BindDirection bind_dir473 = null;
        public BindDirection bind_dir474 = null;
        public BindDirection bind_dir475 = null;
        public BindDirection bind_dir476 = null;
        public BindDirection bind_dir477 = null;
        public BindDirection bind_dir478 = null;
        public BindDirection bind_dir479 = null;
        public BindDirection bind_dir480 = null;
        public BindDirection bind_dir481 = null;
        public BindDirection bind_dir482 = null;
        public BindDirection bind_dir483 = null;
        public BindDirection bind_dir484 = null;
        public BindDirection bind_dir485 = null;
        public BindDirection bind_dir486 = null;
        public BindDirection bind_dir487 = null;
        public BindDirection bind_dir488 = null;
        public BindDirection bind_dir489 = null;
        
        public IEnumerable<FeaturesGroup> LicensedFeatures
        {
        
        get
        {
        List<FeaturesGroup> features = new List<FeaturesGroup>();
        return features;
        
        }
        
        }
        
        public WorkFlowScript()
            : base(VuserClass.CommandLineArguments, new STRunTimeContext(), "test")
        {	
        	UpdateContextWithActionFolder(String.Empty);
        	
        }
        
        public WorkFlowScript(ISTRunTimeContext ctx)
            : base(VuserClass.CommandLineArguments, ctx, "test")
            
        {
        	this._context = ctx;
        	UpdateContextWithActionFolder(String.Empty);
        	UpdateTestSettings(ctx);
        }
        
        internal void InitializeComponent()
        {
        	LoadInput();
        	
        	InitReport();
        	
        	InitializeEncryptionManagerValues();
        
        	_userCode = new TestUserCode();
            _flow = _userCode;
            _flow.Context=this._context;
            
            
        
        	_flow.DataFetchActivity13 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity13");
            _flow.DataFetchActivity10 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity10");
            _flow.StartActivity1 = new HP.ST.Ext.BasicActivities.StartActivity(_context,"StartActivity1");
            _flow.Loop2 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop2Input>(_context,"Loop2",LoopType.ForEach);
            _flow.DataExporterActivity12 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity12");
            _flow.DataExporterActivity15 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity15");
            _flow.DataExporterCloseActivity16 = new HP.ST.Ext.BasicActivities.DataExporterCloseActivity(_context,"DataExporterCloseActivity16");
            _flow.EndActivity3 = new HP.ST.Ext.BasicActivities.EndActivity(_context,"EndActivity3");
            _flow.DataDisconnectActivity11 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity11");
            _flow.DataDisconnectActivity14 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity14");
            this.DataCursorActivity17 = new HP.ST.Ext.BasicActivities.DataCursorActivity(_context,"DataCursorActivity17");
            this.DataCursorActivity17_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            _flow.Sequence9 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence9");
            _flow.HTTPActivity4 = new HP.ST.Ext.HTTPActivity.HTTPActivity(_context,"HTTPActivity4");
            _flow.SetEnvironmentVariableActivity5 = new HP.ST.Ext.BasicActivities.SetEnvironmentVariableActivity(_context,"SetEnvironmentVariableActivity5");
            _flow.ConcatenateStringsActivity6 = new HP.ST.Ext.BasicActivities.ConcatenateStringsActivity(_context,"ConcatenateStringsActivity6");
            _flow.HTTPActivity8 = new HP.ST.Ext.HTTPActivity.HTTPActivity(_context,"HTTPActivity8");
            _flow.HTTPActivity7 = new HP.ST.Ext.HTTPActivity.HTTPActivity(_context,"HTTPActivity7");
            _flow.DataFetchActivity13.Comment = @"";
            _flow.DataFetchActivity13.IconPath = @"";
            _flow.DataFetchActivity13.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity13.QueryClassName = @"HP.ST.Ext.CustomDataProviders.ExcelFileDataQuery";
            XmlDocument DataFetchActivity13_QueryParameters_Document = new XmlDocument();
            DataFetchActivity13_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity13Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>80272394-65bf-4315-bd0d-c63d743f6772</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>excelGetEmprestimo!Registro</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value>excelGetEmprestimo</Value></QueryParameter><QueryParameter><Name>FilePath</Name><Value>" + _context.ResourceManager.GetValue("{excelGetEmprestimo!Registro.TablePath}") + "</Value></QueryParameter><QueryParameter><Name>SheetName</Name><Value>Registro$</Value></QueryParameter><QueryParameter><Name>ContainsHeadersRow</Name><Value>True</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity13_QueryParameters_Document.LoadXml(xmlDataFetchActivity13Params);
            _flow.DataFetchActivity13.QueryParameters = DataFetchActivity13_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("excelGetEmprestimo!Registro", _flow.DataFetchActivity13);
            this.Activities.Add (_flow.DataFetchActivity13);
            _flow.DataFetchActivity10.Comment = @"";
            _flow.DataFetchActivity10.IconPath = @"";
            _flow.DataFetchActivity10.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity10.QueryClassName = @"HP.ST.Ext.CustomDataProviders.ExcelFileDataQuery";
            XmlDocument DataFetchActivity10_QueryParameters_Document = new XmlDocument();
            DataFetchActivity10_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity10Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>98a08927-1a29-4123-a836-b120966e2c33</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>excelGetEmprestimo!Emprestimo</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value>excelGetEmprestimo</Value></QueryParameter><QueryParameter><Name>FilePath</Name><Value>" + _context.ResourceManager.GetValue("{excelGetEmprestimo!Emprestimo.TablePath}") + "</Value></QueryParameter><QueryParameter><Name>SheetName</Name><Value>Emprestimo$</Value></QueryParameter><QueryParameter><Name>ContainsHeadersRow</Name><Value>True</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity10_QueryParameters_Document.LoadXml(xmlDataFetchActivity10Params);
            _flow.DataFetchActivity10.QueryParameters = DataFetchActivity10_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("excelGetEmprestimo!Emprestimo", _flow.DataFetchActivity10);
            this.Activities.Add (_flow.DataFetchActivity10);
            _flow.StartActivity1.Comment = @"";
            _flow.StartActivity1.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.StartActivity1.Name = @"Start";
            _flow.StartActivity1.JVM = new HP.ST.Ext.BasicActivities.JVMProperties();
            _flow.StartActivity1.IsJavaUsed = false;
            _flow.StartActivity1.JVM.Classpath = @"%CLASSPATH%";
            _flow.StartActivity1.JVM.AdditionalVMParameters = @"";
            _flow.StartActivity1.JMS = new HP.ST.Ext.BasicActivities.JMSProperties();
            _flow.StartActivity1.IsJmsUsed = false;
            _flow.StartActivity1.JMS.JNDIContextFactory = @"<Select...>";
            _flow.StartActivity1.JMS.JNDIProviderUrl = @"";
            _flow.StartActivity1.JMS.JMSConnectionFactory = @"";
            _flow.StartActivity1.JMS.SecurityPrincipal = @"";
            _flow.StartActivity1.JMS.SecurityCredentials = @"";
            _flow.StartActivity1.JMS.JMSClientID = @"";
            _flow.StartActivity1.JMS.SSLPassword = @"";
            _flow.StartActivity1.JMS.SSLTrustedCertificate = @"";
            _flow.StartActivity1.JMS.SSLIdentity = @"";
            _flow.StartActivity1.JMS.ConnectionsPerProcess = @"1";
            _flow.StartActivity1.JMS.TimeoutOptions = @"DN_User_defined_Timeout";
            _flow.StartActivity1.JMS.UserTimeout = @"20";
            _flow.StartActivity1.JMS.GenerateAutoSelector = @"No";
            _flow.StartActivity1.KafkaSSL = new HP.ST.Fwk.KafkaFWK.KafkaSSLProperties();
            _flow.StartActivity1.IsKafkaUsed = false;
            _flow.StartActivity1.KafkaSSL.StrEnableSSL = @"No";
            _flow.StartActivity1.KafkaSSL.SSLCALocation = @"";
            _flow.StartActivity1.KafkaSSL.SSLClientCertificateLocation = @"";
            _flow.StartActivity1.KafkaSSL.SSLClientKeyLocation = @"";
            _flow.StartActivity1.KafkaSASL = new HP.ST.Fwk.KafkaFWK.KafkaSASLProperties();
            _flow.StartActivity1.KafkaSASL.StrEnableSASL = @"No";
            _flow.StartActivity1.KafkaSASL.StrMechanism = @"GSSAPI";
            _flow.StartActivity1.KafkaSASL.StrServiceName = @"";
            this.Activities.Add (_flow.StartActivity1);
            _flow.Loop2.ConditionAsString = @"For each item in {DataSource.excelGetEmprestimo!Emprestimo}";
            _flow.Loop2.NumberOfIterations = (int)1;
            _flow.Loop2.Condition += delegate(object sender,STActivityBaseEventArgs e)
            {
            return !DataCursorActivity17.IsAtEndPosition;
            };
            _flow.Loop2.Comment = @"";
            _flow.Loop2.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop2.Name = @"Test Flow";
            _flow.Loop2.Activities.Add (this.DataCursorActivity17);
            _flow.Loop2.Activities.Add (_flow.Sequence9);
            this.Activities.Add (_flow.Loop2);
            _flow.DataExporterActivity12.Comment = @"";
            _flow.DataExporterActivity12.IconPath = @"";
            VTDPropertyInfoBase pi913 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter457 = new VTDObjectGetter(pi913);
            VTDPropertyInfoBase pi914 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter457 = new VTDObjectSetter(pi914);
            binding_setter457 = new StringFormaterDecorator(binding_setter457,"{Step.DataFetchActivity10.OutTable}");
            bind_dir457 = new BindDirection(_flow.DataFetchActivity10,binding_getter457,binding_setter457,BindTargetType.ToInProperty);
            _flow.DataExporterActivity12.InDirections.Add(bind_dir457);
            this.Activities.Add (_flow.DataExporterActivity12);
            _flow.DataExporterActivity15.Comment = @"";
            _flow.DataExporterActivity15.IconPath = @"";
            VTDPropertyInfoBase pi915 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter458 = new VTDObjectGetter(pi915);
            VTDPropertyInfoBase pi916 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter458 = new VTDObjectSetter(pi916);
            binding_setter458 = new StringFormaterDecorator(binding_setter458,"{Step.DataFetchActivity13.OutTable}");
            bind_dir458 = new BindDirection(_flow.DataFetchActivity13,binding_getter458,binding_setter458,BindTargetType.ToInProperty);
            _flow.DataExporterActivity15.InDirections.Add(bind_dir458);
            this.Activities.Add (_flow.DataExporterActivity15);
            _flow.DataExporterCloseActivity16.Comment = @"";
            _flow.DataExporterCloseActivity16.IconPath = @"";
            this.Activities.Add (_flow.DataExporterCloseActivity16);
            _flow.EndActivity3.Comment = @"";
            _flow.EndActivity3.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.EndActivity3.Name = @"End";
            this.Activities.Add (_flow.EndActivity3);
            _flow.DataDisconnectActivity11.Comment = @"";
            _flow.DataDisconnectActivity11.IconPath = @"";
            VTDPropertyInfoBase pi917 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter459 = new VTDObjectGetter(pi917);
            VTDPropertyInfoBase pi918 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter459 = new VTDObjectSetter(pi918);
            binding_setter459 = new StringFormaterDecorator(binding_setter459,"{Step.DataFetchActivity10.OutTable}");
            bind_dir459 = new BindDirection(_flow.DataFetchActivity10,binding_getter459,binding_setter459,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity11.InDirections.Add(bind_dir459);
            this.Activities.Add (_flow.DataDisconnectActivity11);
            _flow.DataDisconnectActivity14.Comment = @"";
            _flow.DataDisconnectActivity14.IconPath = @"";
            VTDPropertyInfoBase pi919 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter460 = new VTDObjectGetter(pi919);
            VTDPropertyInfoBase pi920 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter460 = new VTDObjectSetter(pi920);
            binding_setter460 = new StringFormaterDecorator(binding_setter460,"{Step.DataFetchActivity13.OutTable}");
            bind_dir460 = new BindDirection(_flow.DataFetchActivity13,binding_getter460,binding_setter460,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity14.InDirections.Add(bind_dir460);
            this.Activities.Add (_flow.DataDisconnectActivity14);
            this.DataCursorActivity17.Comment = @"";
            this.DataCursorActivity17.IconPath = @"";
            VTDPropertyInfoBase pi921 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter461 = new VTDObjectGetter(pi921);
            VTDPropertyInfoBase pi922 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter461 = new VTDObjectSetter(pi922);
            binding_setter461 = new StringFormaterDecorator(binding_setter461,"{Step.DataFetchActivity10.OutTable}");
            bind_dir461 = new BindDirection(_flow.DataFetchActivity10,binding_getter461,binding_setter461,BindTargetType.ToInProperty);
            this.DataCursorActivity17.InDirections.Add(bind_dir461);
            this.DataCursorActivity17_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.DataCursorActivity17_Policy.StartAtSpecificRow = 1;
            this.DataCursorActivity17_Policy.StartCondition.ColumnName = "";
            this.DataCursorActivity17_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity17_Policy.StartCondition.Value = "";
            this.DataCursorActivity17_Policy.EndPosition = CursorEndPosition.LastRecord;
            this.DataCursorActivity17_Policy.EndAtSpecificRow = 1;
            this.DataCursorActivity17_Policy.EndCondition.ColumnName = "";
            this.DataCursorActivity17_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity17_Policy.EndCondition.Value = "";
            this.DataCursorActivity17_Policy.StepType = CursorStepType.Forward;
            this.DataCursorActivity17_Policy.StepSize = 1;
            this.DataCursorActivity17_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.DataCursorActivity17.Policy = this.DataCursorActivity17_Policy;
            this.DataCursorActivity17.ReportStepData = true;
            _flow.Loop2.BeforeExecuteStepEvent += this.DataCursorActivity17.ResetCursor;
            _flow.Sequence9.Comment = @"";
            _flow.Sequence9.IconPath = @"";
            _flow.Sequence9.Name = @"Sequence9";
            _flow.Sequence9.Activities.Add (_flow.HTTPActivity4);
            _flow.Sequence9.Activities.Add (_flow.SetEnvironmentVariableActivity5);
            _flow.Sequence9.Activities.Add (_flow.ConcatenateStringsActivity6);
            _flow.Sequence9.Activities.Add (_flow.HTTPActivity8);
            _flow.Sequence9.Activities.Add (_flow.HTTPActivity7);
            _flow.HTTPActivity4.TextBody = @"";
            _flow.HTTPActivity4.TextXmlBody = @"";
            _flow.HTTPActivity4.FileBody = @"";
            _flow.HTTPActivity4.PostBody = @"";
            _flow.HTTPActivity4.Url = @"http://localhost:3434/cars-app/api/login";
            _flow.HTTPActivity4.HttpMethod = @"POST";
            _flow.HTTPActivity4.HttpVersion = @"1.1";
            _flow.HTTPActivity4.RequestHeaders = new Pair<string, string>[1];
            _flow.HTTPActivity4.RequestHeaders[0] = new Pair<string, string>();
            _flow.HTTPActivity4.RequestHeaders[0].Key = @"Content-Type";
            _flow.HTTPActivity4.RequestHeaders[0].Value = @"application/json";
            _flow.HTTPActivity4.Comment = @"";
            _flow.HTTPActivity4.IconPath = @"AddIns\ServiceTest\HTTPActivity\toolbox_http.png";
            _flow.HTTPActivity4.RequestBodyType = @"Json";
            _flow.HTTPActivity4.ResponseType = @"Json";
            _flow.HTTPActivity4.Name = @"HTTP Request4";
            _flow.HTTPActivity4.Proxy.Server = @"";
            _flow.HTTPActivity4.Proxy.Username = @"";
            _flow.HTTPActivity4.Proxy.Password = @"";
            _flow.HTTPActivity4.Authentication.Username = @"";
            _flow.HTTPActivity4.Authentication.Password = @"";
            _flow.HTTPActivity4.Authentication.PreemptiveAuthentication = false;
            _flow.HTTPActivity4.ConnectionType = @"Keep-Alive";
            _flow.HTTPActivity4.Timeout = (int)100000;
            _flow.HTTPActivity4.ClientCertificate.Password = @"";
            _flow.HTTPActivity4.ClientCertificate.FileSystem.Path = @"";
            _flow.HTTPActivity4.UseClientCertificate = false;
            _flow.HTTPActivity4.MaximumAutomaticRedirections = (int)3;
            _flow.HTTPActivity4.AllowRedirections = true;
            _flow.HTTPActivity4.ReuseCookies = false;
            _flow.HTTPActivity4.ExpectServerError = false;
            _flow.HTTPActivity4.HanaRequest = false;
            XmlDocument HTTPActivity4_XMLBody_Document = new XmlDocument();
            HTTPActivity4_XMLBody_Document.PreserveWhitespace = true;
            HTTPActivity4_XMLBody_Document.LoadXml(
@"<Object jsonType=""Object"" isAnonymous=""true""><username jsonType=""String"">{DataSource.excelGetEmprestimo!Emprestimo.USERNAME}</username><password jsonType=""String"">{DataSource.excelGetEmprestimo!Emprestimo.PASSWORD}</password></Object>");
            _flow.HTTPActivity4.XMLBody = HTTPActivity4_XMLBody_Document;
            XmlDocument HTTPActivity4_RequestMultipartInfoXml_Document = new XmlDocument();
            HTTPActivity4_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            HTTPActivity4_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.HTTPActivity4.RequestMultipartInfoXml = HTTPActivity4_RequestMultipartInfoXml_Document;
            _flow.HTTPActivity4.Multipart=false;
            VTDPropertyInfoBase pi923 = new VTDPropertyInfoBase("USERNAME");
            VTDBaseGetter binding_getter462 = new VTDObjectGetter(pi923);
            VTDPropertyInfoBase pi924 = new VTDPropertyInfoBase("XMLBody","/*[local-name(.)='Object'][1]/*[local-name(.)='username'][1]");
            VTDBaseSetter binding_setter462 = new VTDJsonSetter(pi924,XmlTypeCode.String);
            binding_setter462 = new StringFormaterDecorator(binding_setter462,"{DataSource.excelGetEmprestimo!Emprestimo.USERNAME}");
            bind_dir462 = new BindDirection(this.DataCursorActivity17,binding_getter462,binding_setter462,BindTargetType.ToInProperty);
            _flow.HTTPActivity4.InDirections.Add(bind_dir462);
            VTDPropertyInfoBase pi925 = new VTDPropertyInfoBase("PASSWORD");
            VTDBaseGetter binding_getter463 = new VTDObjectGetter(pi925);
            VTDPropertyInfoBase pi926 = new VTDPropertyInfoBase("XMLBody","/*[local-name(.)='Object'][1]/*[local-name(.)='password'][1]");
            VTDBaseSetter binding_setter463 = new VTDJsonSetter(pi926,XmlTypeCode.String);
            binding_setter463 = new StringFormaterDecorator(binding_setter463,"{DataSource.excelGetEmprestimo!Emprestimo.PASSWORD}");
            bind_dir463 = new BindDirection(this.DataCursorActivity17,binding_getter463,binding_setter463,BindTargetType.ToInProperty);
            _flow.HTTPActivity4.InDirections.Add(bind_dir463);
            XmlDocument HTTPActivity4_ExpectedResponseXmlBody_Document = new XmlDocument();
            HTTPActivity4_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            HTTPActivity4_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity4.ExpectedResponseXmlBody = HTTPActivity4_ExpectedResponseXmlBody_Document;
            XmlDocument HTTPActivity4_ExpectedResponseJsonBody_Document = new XmlDocument();
            HTTPActivity4_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            HTTPActivity4_ExpectedResponseJsonBody_Document.LoadXml(
@"<Object jsonType=""Object"" isAnonymous=""true""><firstname jsonType=""String"">{DataSource.excelGetEmprestimo!Emprestimo.FIRSTNAME}</firstname><lastname jsonType=""String"">{DataSource.excelGetEmprestimo!Emprestimo.LASTNAME}</lastname><username jsonType=""String"">{DataSource.excelGetEmprestimo!Emprestimo.USERNAME}</username><token_type jsonType=""String"">Bearer</token_type><access_token jsonType=""String"">eyJhbGciOiJIUzI1NiJ9.eyJwcmluY2lwYWwiOiJINHNJQUFBQUFBQUFBSlZTUDBcL2JRQlJcL0RrR0FrUGhUcVpVNjBBVzZJVWRxeDB3RkJhVEtBa1RJa2twRkZcL3ZGUFRqZnVYZG5TSllxRXd3TUlDZ1NFbCtCYjlJdWZBQUVRMWRtVnQ2WmdBTUw2azMydTU5XC9cLzU0dmJtSFlhUGdjYThhRjhWT1J4Vno2SnRWY3hnYkRUSFBiOVRPRE9rS2JJNVp6WUlNbThIQzhFbmdCbEhoazRVMnd4WFpZUlRBWlYxWmJXeGphYWtmREo2WGpQbU5ic3dSM2xkNzJuN2hEcGZHWlFFSHRIWlZncEFuVExBeFZKdTJLa3JWT3lqVkdUWmdxWm9FS3Q5M29iVWczS0MxbndneENSMUN5bHNBb2dIR1cyUitLVkRrYUM1TVBaalBMUmFXT3RockFhTXFNSVhjdmt0U3RzKzd1blUxSkNYN0NMeWgzVW84T2RmZlJRWDNINHk4cUlTZzFWOUxNTldTaUl0N21UcHo0ZXpQSGw0Zm52VVlKZ0RxWmZcLzJiWXY1K0FYcFwvdnQ5OXlJdjJRZ3Z2QnF3WHNHb25KVGZUQmZPR1JxZDhkYloyY25xN1wvMjJJbEIxaTZmXC8zTWZlbDMxeDNVU1VwMDh5cWdSMFI3VzdaUFJQNXd1dmtqMXZvK25XZXBBTHBqNUlXb3llSmdwamlsclVTajMxYkdGdGZEV3FialhwdDNiMk50ckhKa3dRMTZVN2tzZDIrXC9FRFJ0ZzcrSGYwOW5MMG1qcTh3dk1ORWh0VDZWQUZheVpJVzZyMkwwNW54M3pjSGVZYitcL3p4MkQ3WHRCcnNUQXdBQSIsInN1YiI6ImZlWmltbWVyIiwicm9sZXMiOlsiUk9MRV9VU0VSIl0sImV4cCI6MTcwMzAwMTIyMSwiaWF0IjoxNzAyOTk3NjIxfQ.jybphjIpOXIvmJQX5_19Wj9H_fNyNW6snv_vKKEuZx0</access_token><roles jsonType=""Array""><Value jsonType=""String"" isAnonymous=""true"">ROLE_USER</Value></roles></Object>");
            _flow.HTTPActivity4.ExpectedResponseJsonBody = HTTPActivity4_ExpectedResponseJsonBody_Document;
            XmlDocument HTTPActivity4_ExpectedOutputProperties_Document = new XmlDocument();
            HTTPActivity4_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            HTTPActivity4_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion /><StatusCode>200</StatusCode><StatusDescription /><ResponseBody /><ResponseBodyAsBase64 /></Arguments>");
            _flow.HTTPActivity4.ExpectedOutputProperties = HTTPActivity4_ExpectedOutputProperties_Document;
            VTDPropertyInfoBase pi927 = new VTDPropertyInfoBase("FIRSTNAME");
            VTDBaseGetter binding_getter464 = new VTDObjectGetter(pi927);
            VTDPropertyInfoBase pi928 = new VTDPropertyInfoBase("XMLResponse","/*[local-name(.)='Object'][1]/*[local-name(.)='firstname'][1]");
            VTDBaseSetter binding_setter464 = new VTDCheckpointSetter(XmlTypeCode.String);
            binding_setter464 = new StringFormaterDecorator(binding_setter464,"{DataSource.excelGetEmprestimo!Emprestimo.FIRSTNAME}");
            bind_dir464 = new BindDirection(this.DataCursorActivity17,binding_getter464,binding_setter464,BindTargetType.ToInProperty);
            VTDPropertyInfoBase pi929 = new VTDPropertyInfoBase("LASTNAME");
            VTDBaseGetter binding_getter465 = new VTDObjectGetter(pi929);
            VTDPropertyInfoBase pi930 = new VTDPropertyInfoBase("XMLResponse","/*[local-name(.)='Object'][1]/*[local-name(.)='lastname'][1]");
            VTDBaseSetter binding_setter465 = new VTDCheckpointSetter(XmlTypeCode.String);
            binding_setter465 = new StringFormaterDecorator(binding_setter465,"{DataSource.excelGetEmprestimo!Emprestimo.LASTNAME}");
            bind_dir465 = new BindDirection(this.DataCursorActivity17,binding_getter465,binding_setter465,BindTargetType.ToInProperty);
            VTDPropertyInfoBase pi931 = new VTDPropertyInfoBase("USERNAME");
            VTDBaseGetter binding_getter466 = new VTDObjectGetter(pi931);
            VTDPropertyInfoBase pi932 = new VTDPropertyInfoBase("XMLResponse","/*[local-name(.)='Object'][1]/*[local-name(.)='username'][1]");
            VTDBaseSetter binding_setter466 = new VTDCheckpointSetter(XmlTypeCode.String);
            binding_setter466 = new StringFormaterDecorator(binding_setter466,"{DataSource.excelGetEmprestimo!Emprestimo.USERNAME}");
            bind_dir466 = new BindDirection(this.DataCursorActivity17,binding_getter466,binding_setter466,BindTargetType.ToInProperty);
            set_HTTPActivity4_checkpoints(_flow.HTTPActivity4);
            _flow.SetEnvironmentVariableActivity5.VariableKey = @"Token";
            _flow.SetEnvironmentVariableActivity5.VariableValue = @"{Step.ResponseJsonBody.HTTPActivity4.access_token}";
            _flow.SetEnvironmentVariableActivity5.Comment = @"";
            _flow.SetEnvironmentVariableActivity5.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_setenv.png";
            _flow.SetEnvironmentVariableActivity5.Name = @"Set OS Environment Variable5";
            VTDPropertyInfoBase pi933 = new VTDPropertyInfoBase("XMLResponse","/*[local-name(.)='Object'][1]/*[local-name(.)='access_token'][1]");
            VTDBaseGetter binding_getter467 = new VTDJsonGetter(pi933);
            VTDPropertyInfoBase pi934 = new VTDPropertyInfoBase("VariableValue");
            VTDBaseSetter binding_setter467 = new VTDObjectSetter(pi934);
            binding_setter467 = new StringFormaterDecorator(binding_setter467,"{Step.ResponseJsonBody.HTTPActivity4.access_token}");
            bind_dir467 = new BindDirection(_flow.HTTPActivity4,binding_getter467,binding_setter467,BindTargetType.ToInProperty);
            _flow.SetEnvironmentVariableActivity5.InDirections.Add(bind_dir467);
            _flow.ConcatenateStringsActivity6.Prefix = @"Bearer ";
            _flow.ConcatenateStringsActivity6.Suffix = @"{Step.InputProperties.SetEnvironmentVariableActivity5.VariableValue}";
            _flow.ConcatenateStringsActivity6.Comment = @"";
            _flow.ConcatenateStringsActivity6.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_concat.png";
            _flow.ConcatenateStringsActivity6.Name = @"Concatenate Strings6";
            VTDPropertyInfoBase pi935 = new VTDPropertyInfoBase("VariableValue");
            VTDBaseGetter binding_getter468 = new VTDObjectGetter(pi935);
            VTDPropertyInfoBase pi936 = new VTDPropertyInfoBase("Suffix");
            VTDBaseSetter binding_setter468 = new VTDObjectSetter(pi936);
            binding_setter468 = new StringFormaterDecorator(binding_setter468,"{Step.InputProperties.SetEnvironmentVariableActivity5.VariableValue}");
            bind_dir468 = new BindDirection(_flow.SetEnvironmentVariableActivity5,binding_getter468,binding_setter468,BindTargetType.ToInProperty);
            _flow.ConcatenateStringsActivity6.InDirections.Add(bind_dir468);
            _flow.HTTPActivity8.TextBody = @"";
            _flow.HTTPActivity8.TextXmlBody = @"";
            _flow.HTTPActivity8.FileBody = @"";
            _flow.HTTPActivity8.PostBody = @"";
            _flow.HTTPActivity8.Url = @"http://localhost:3434/cars-app/api/loanApp";
            _flow.HTTPActivity8.HttpMethod = @"POST";
            _flow.HTTPActivity8.HttpVersion = @"1.1";
            _flow.HTTPActivity8.RequestHeaders = new Pair<string, string>[2];
            _flow.HTTPActivity8.RequestHeaders[0] = new Pair<string, string>();
            _flow.HTTPActivity8.RequestHeaders[0].Key = @"Authorization";
            _flow.HTTPActivity8.RequestHeaders[0].Value = @"{Step.OutputProperties.ConcatenateStringsActivity6.Result}";
            _flow.HTTPActivity8.RequestHeaders[1] = new Pair<string, string>();
            _flow.HTTPActivity8.RequestHeaders[1].Key = @"Content-Type";
            _flow.HTTPActivity8.RequestHeaders[1].Value = @"application/json";
            _flow.HTTPActivity8.Comment = @"";
            _flow.HTTPActivity8.IconPath = @"AddIns\ServiceTest\HTTPActivity\toolbox_http.png";
            _flow.HTTPActivity8.RequestBodyType = @"Json";
            _flow.HTTPActivity8.ResponseType = @"Json";
            _flow.HTTPActivity8.Name = @"HTTP Request8";
            _flow.HTTPActivity8.Proxy.Server = @"";
            _flow.HTTPActivity8.Proxy.Username = @"";
            _flow.HTTPActivity8.Proxy.Password = @"";
            _flow.HTTPActivity8.Authentication.Username = @"";
            _flow.HTTPActivity8.Authentication.Password = @"";
            _flow.HTTPActivity8.Authentication.PreemptiveAuthentication = false;
            _flow.HTTPActivity8.ConnectionType = @"Keep-Alive";
            _flow.HTTPActivity8.Timeout = (int)100000;
            _flow.HTTPActivity8.ClientCertificate.Password = @"";
            _flow.HTTPActivity8.ClientCertificate.FileSystem.Path = @"";
            _flow.HTTPActivity8.UseClientCertificate = false;
            _flow.HTTPActivity8.MaximumAutomaticRedirections = (int)3;
            _flow.HTTPActivity8.AllowRedirections = true;
            _flow.HTTPActivity8.ReuseCookies = false;
            _flow.HTTPActivity8.ExpectServerError = false;
            _flow.HTTPActivity8.HanaRequest = false;
            XmlDocument HTTPActivity8_XMLBody_Document = new XmlDocument();
            HTTPActivity8_XMLBody_Document.PreserveWhitespace = true;
            HTTPActivity8_XMLBody_Document.LoadXml(
@"<Object jsonType=""Object"" isAnonymous=""true""><firstName jsonType=""String"">{DataSource.excelGetEmprestimo!Emprestimo.FIRSTNAME}</firstName><lastName jsonType=""String"">{DataSource.excelGetEmprestimo!Emprestimo.LASTNAME}</lastName><address1 jsonType=""String"">{DataSource.excelGetEmprestimo!Emprestimo.ADDRESS1}</address1><city jsonType=""String"">{DataSource.excelGetEmprestimo!Emprestimo.CITY}</city><state jsonType=""String"">{DataSource.excelGetEmprestimo!Emprestimo.STATE}</state><zip jsonType=""String"">{DataSource.excelGetEmprestimo!Emprestimo.ZIP}</zip><country jsonType=""String"">{DataSource.excelGetEmprestimo!Emprestimo.COUNTRY}</country><dob jsonType=""Date"">{DataSource.excelGetEmprestimo!Emprestimo.DOB}</dob><ssn jsonType=""String"">{DataSource.excelGetEmprestimo!Emprestimo.SSN}</ssn><employer jsonType=""String"">{DataSource.excelGetEmprestimo!Emprestimo.EMPLOYER}</employer><phoneNumber jsonType=""String"">{DataSource.excelGetEmprestimo!Emprestimo.PHONENUMBER}</phoneNumber><durationOfJob jsonType=""String"">{DataSource.excelGetEmprestimo!Emprestimo.DURATIONOFJOB}</durationOfJob><income jsonType=""Integer"">{DataSource.excelGetEmprestimo!Emprestimo.INCOME}</income><loanTerm jsonType=""Integer"">{DataSource.excelGetEmprestimo!Emprestimo.LOANTERM}</loanTerm><loanAmount jsonType=""Integer"">{DataSource.excelGetEmprestimo!Emprestimo.LOANAMOUNT}</loanAmount><validateAddress jsonType=""Boolean"">{DataSource.excelGetEmprestimo!Emprestimo.VALIDATEADDRESS}</validateAddress></Object>");
            _flow.HTTPActivity8.XMLBody = HTTPActivity8_XMLBody_Document;
            XmlDocument HTTPActivity8_RequestMultipartInfoXml_Document = new XmlDocument();
            HTTPActivity8_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            HTTPActivity8_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.HTTPActivity8.RequestMultipartInfoXml = HTTPActivity8_RequestMultipartInfoXml_Document;
            _flow.HTTPActivity8.Multipart=false;
            VTDPropertyInfoBase pi937 = new VTDPropertyInfoBase("ZIP");
            VTDBaseGetter binding_getter469 = new VTDObjectGetter(pi937);
            VTDPropertyInfoBase pi938 = new VTDPropertyInfoBase("XMLBody","/*[local-name(.)='Object'][1]/*[local-name(.)='zip'][1]");
            VTDBaseSetter binding_setter469 = new VTDJsonSetter(pi938,XmlTypeCode.String);
            binding_setter469 = new StringFormaterDecorator(binding_setter469,"{DataSource.excelGetEmprestimo!Emprestimo.ZIP}");
            bind_dir469 = new BindDirection(this.DataCursorActivity17,binding_getter469,binding_setter469,BindTargetType.ToInProperty);
            _flow.HTTPActivity8.InDirections.Add(bind_dir469);
            VTDPropertyInfoBase pi939 = new VTDPropertyInfoBase("VALIDATEADDRESS");
            VTDBaseGetter binding_getter470 = new VTDObjectGetter(pi939);
            VTDPropertyInfoBase pi940 = new VTDPropertyInfoBase("XMLBody","/*[local-name(.)='Object'][1]/*[local-name(.)='validateAddress'][1]");
            VTDBaseSetter binding_setter470 = new VTDJsonSetter(pi940,XmlTypeCode.Boolean);
            bind_dir470 = new BindDirection(this.DataCursorActivity17,binding_getter470,binding_setter470,BindTargetType.ToInProperty);
            _flow.HTTPActivity8.InDirections.Add(bind_dir470);
            VTDPropertyInfoBase pi941 = new VTDPropertyInfoBase("STATE");
            VTDBaseGetter binding_getter471 = new VTDObjectGetter(pi941);
            VTDPropertyInfoBase pi942 = new VTDPropertyInfoBase("XMLBody","/*[local-name(.)='Object'][1]/*[local-name(.)='state'][1]");
            VTDBaseSetter binding_setter471 = new VTDJsonSetter(pi942,XmlTypeCode.String);
            binding_setter471 = new StringFormaterDecorator(binding_setter471,"{DataSource.excelGetEmprestimo!Emprestimo.STATE}");
            bind_dir471 = new BindDirection(this.DataCursorActivity17,binding_getter471,binding_setter471,BindTargetType.ToInProperty);
            _flow.HTTPActivity8.InDirections.Add(bind_dir471);
            VTDPropertyInfoBase pi943 = new VTDPropertyInfoBase("SSN");
            VTDBaseGetter binding_getter472 = new VTDObjectGetter(pi943);
            VTDPropertyInfoBase pi944 = new VTDPropertyInfoBase("XMLBody","/*[local-name(.)='Object'][1]/*[local-name(.)='ssn'][1]");
            VTDBaseSetter binding_setter472 = new VTDJsonSetter(pi944,XmlTypeCode.String);
            binding_setter472 = new StringFormaterDecorator(binding_setter472,"{DataSource.excelGetEmprestimo!Emprestimo.SSN}");
            bind_dir472 = new BindDirection(this.DataCursorActivity17,binding_getter472,binding_setter472,BindTargetType.ToInProperty);
            _flow.HTTPActivity8.InDirections.Add(bind_dir472);
            VTDPropertyInfoBase pi945 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter473 = new VTDObjectGetter(pi945);
            VTDPropertyInfoBase pi946 = new VTDPropertyInfoBase("RequestHeaders[0].Value");
            VTDBaseSetter binding_setter473 = new VTDObjectSetter(pi946);
            binding_setter473 = new StringFormaterDecorator(binding_setter473,"{Step.OutputProperties.ConcatenateStringsActivity6.Result}");
            bind_dir473 = new BindDirection(_flow.ConcatenateStringsActivity6,binding_getter473,binding_setter473,BindTargetType.ToInProperty);
            _flow.HTTPActivity8.InDirections.Add(bind_dir473);
            VTDPropertyInfoBase pi947 = new VTDPropertyInfoBase("PHONENUMBER");
            VTDBaseGetter binding_getter474 = new VTDObjectGetter(pi947);
            VTDPropertyInfoBase pi948 = new VTDPropertyInfoBase("XMLBody","/*[local-name(.)='Object'][1]/*[local-name(.)='phoneNumber'][1]");
            VTDBaseSetter binding_setter474 = new VTDJsonSetter(pi948,XmlTypeCode.String);
            binding_setter474 = new StringFormaterDecorator(binding_setter474,"{DataSource.excelGetEmprestimo!Emprestimo.PHONENUMBER}");
            bind_dir474 = new BindDirection(this.DataCursorActivity17,binding_getter474,binding_setter474,BindTargetType.ToInProperty);
            _flow.HTTPActivity8.InDirections.Add(bind_dir474);
            VTDPropertyInfoBase pi949 = new VTDPropertyInfoBase("LOANTERM");
            VTDBaseGetter binding_getter475 = new VTDObjectGetter(pi949);
            VTDPropertyInfoBase pi950 = new VTDPropertyInfoBase("XMLBody","/*[local-name(.)='Object'][1]/*[local-name(.)='loanTerm'][1]");
            VTDBaseSetter binding_setter475 = new VTDJsonSetter(pi950,XmlTypeCode.UnsignedByte);
            bind_dir475 = new BindDirection(this.DataCursorActivity17,binding_getter475,binding_setter475,BindTargetType.ToInProperty);
            _flow.HTTPActivity8.InDirections.Add(bind_dir475);
            VTDPropertyInfoBase pi951 = new VTDPropertyInfoBase("LOANAMOUNT");
            VTDBaseGetter binding_getter476 = new VTDObjectGetter(pi951);
            VTDPropertyInfoBase pi952 = new VTDPropertyInfoBase("XMLBody","/*[local-name(.)='Object'][1]/*[local-name(.)='loanAmount'][1]");
            VTDBaseSetter binding_setter476 = new VTDJsonSetter(pi952,XmlTypeCode.UnsignedShort);
            bind_dir476 = new BindDirection(this.DataCursorActivity17,binding_getter476,binding_setter476,BindTargetType.ToInProperty);
            _flow.HTTPActivity8.InDirections.Add(bind_dir476);
            VTDPropertyInfoBase pi953 = new VTDPropertyInfoBase("LASTNAME");
            VTDBaseGetter binding_getter477 = new VTDObjectGetter(pi953);
            VTDPropertyInfoBase pi954 = new VTDPropertyInfoBase("XMLBody","/*[local-name(.)='Object'][1]/*[local-name(.)='lastName'][1]");
            VTDBaseSetter binding_setter477 = new VTDJsonSetter(pi954,XmlTypeCode.String);
            binding_setter477 = new StringFormaterDecorator(binding_setter477,"{DataSource.excelGetEmprestimo!Emprestimo.LASTNAME}");
            bind_dir477 = new BindDirection(this.DataCursorActivity17,binding_getter477,binding_setter477,BindTargetType.ToInProperty);
            _flow.HTTPActivity8.InDirections.Add(bind_dir477);
            VTDPropertyInfoBase pi955 = new VTDPropertyInfoBase("INCOME");
            VTDBaseGetter binding_getter478 = new VTDObjectGetter(pi955);
            VTDPropertyInfoBase pi956 = new VTDPropertyInfoBase("XMLBody","/*[local-name(.)='Object'][1]/*[local-name(.)='income'][1]");
            VTDBaseSetter binding_setter478 = new VTDJsonSetter(pi956,XmlTypeCode.UnsignedInt);
            bind_dir478 = new BindDirection(this.DataCursorActivity17,binding_getter478,binding_setter478,BindTargetType.ToInProperty);
            _flow.HTTPActivity8.InDirections.Add(bind_dir478);
            VTDPropertyInfoBase pi957 = new VTDPropertyInfoBase("FIRSTNAME");
            VTDBaseGetter binding_getter479 = new VTDObjectGetter(pi957);
            VTDPropertyInfoBase pi958 = new VTDPropertyInfoBase("XMLBody","/*[local-name(.)='Object'][1]/*[local-name(.)='firstName'][1]");
            VTDBaseSetter binding_setter479 = new VTDJsonSetter(pi958,XmlTypeCode.String);
            binding_setter479 = new StringFormaterDecorator(binding_setter479,"{DataSource.excelGetEmprestimo!Emprestimo.FIRSTNAME}");
            bind_dir479 = new BindDirection(this.DataCursorActivity17,binding_getter479,binding_setter479,BindTargetType.ToInProperty);
            _flow.HTTPActivity8.InDirections.Add(bind_dir479);
            VTDPropertyInfoBase pi959 = new VTDPropertyInfoBase("EMPLOYER");
            VTDBaseGetter binding_getter480 = new VTDObjectGetter(pi959);
            VTDPropertyInfoBase pi960 = new VTDPropertyInfoBase("XMLBody","/*[local-name(.)='Object'][1]/*[local-name(.)='employer'][1]");
            VTDBaseSetter binding_setter480 = new VTDJsonSetter(pi960,XmlTypeCode.String);
            binding_setter480 = new StringFormaterDecorator(binding_setter480,"{DataSource.excelGetEmprestimo!Emprestimo.EMPLOYER}");
            bind_dir480 = new BindDirection(this.DataCursorActivity17,binding_getter480,binding_setter480,BindTargetType.ToInProperty);
            _flow.HTTPActivity8.InDirections.Add(bind_dir480);
            VTDPropertyInfoBase pi961 = new VTDPropertyInfoBase("DURATIONOFJOB");
            VTDBaseGetter binding_getter481 = new VTDObjectGetter(pi961);
            VTDPropertyInfoBase pi962 = new VTDPropertyInfoBase("XMLBody","/*[local-name(.)='Object'][1]/*[local-name(.)='durationOfJob'][1]");
            VTDBaseSetter binding_setter481 = new VTDJsonSetter(pi962,XmlTypeCode.String);
            binding_setter481 = new StringFormaterDecorator(binding_setter481,"{DataSource.excelGetEmprestimo!Emprestimo.DURATIONOFJOB}");
            bind_dir481 = new BindDirection(this.DataCursorActivity17,binding_getter481,binding_setter481,BindTargetType.ToInProperty);
            _flow.HTTPActivity8.InDirections.Add(bind_dir481);
            VTDPropertyInfoBase pi963 = new VTDPropertyInfoBase("DOB");
            VTDBaseGetter binding_getter482 = new VTDObjectGetter(pi963);
            VTDPropertyInfoBase pi964 = new VTDPropertyInfoBase("XMLBody","/*[local-name(.)='Object'][1]/*[local-name(.)='dob'][1]");
            VTDBaseSetter binding_setter482 = new VTDJsonSetter(pi964,XmlTypeCode.String);
            binding_setter482 = new StringFormaterDecorator(binding_setter482,"{DataSource.excelGetEmprestimo!Emprestimo.DOB}");
            bind_dir482 = new BindDirection(this.DataCursorActivity17,binding_getter482,binding_setter482,BindTargetType.ToInProperty);
            _flow.HTTPActivity8.InDirections.Add(bind_dir482);
            VTDPropertyInfoBase pi965 = new VTDPropertyInfoBase("COUNTRY");
            VTDBaseGetter binding_getter483 = new VTDObjectGetter(pi965);
            VTDPropertyInfoBase pi966 = new VTDPropertyInfoBase("XMLBody","/*[local-name(.)='Object'][1]/*[local-name(.)='country'][1]");
            VTDBaseSetter binding_setter483 = new VTDJsonSetter(pi966,XmlTypeCode.String);
            binding_setter483 = new StringFormaterDecorator(binding_setter483,"{DataSource.excelGetEmprestimo!Emprestimo.COUNTRY}");
            bind_dir483 = new BindDirection(this.DataCursorActivity17,binding_getter483,binding_setter483,BindTargetType.ToInProperty);
            _flow.HTTPActivity8.InDirections.Add(bind_dir483);
            VTDPropertyInfoBase pi967 = new VTDPropertyInfoBase("CITY");
            VTDBaseGetter binding_getter484 = new VTDObjectGetter(pi967);
            VTDPropertyInfoBase pi968 = new VTDPropertyInfoBase("XMLBody","/*[local-name(.)='Object'][1]/*[local-name(.)='city'][1]");
            VTDBaseSetter binding_setter484 = new VTDJsonSetter(pi968,XmlTypeCode.String);
            binding_setter484 = new StringFormaterDecorator(binding_setter484,"{DataSource.excelGetEmprestimo!Emprestimo.CITY}");
            bind_dir484 = new BindDirection(this.DataCursorActivity17,binding_getter484,binding_setter484,BindTargetType.ToInProperty);
            _flow.HTTPActivity8.InDirections.Add(bind_dir484);
            VTDPropertyInfoBase pi969 = new VTDPropertyInfoBase("ADDRESS1");
            VTDBaseGetter binding_getter485 = new VTDObjectGetter(pi969);
            VTDPropertyInfoBase pi970 = new VTDPropertyInfoBase("XMLBody","/*[local-name(.)='Object'][1]/*[local-name(.)='address1'][1]");
            VTDBaseSetter binding_setter485 = new VTDJsonSetter(pi970,XmlTypeCode.String);
            binding_setter485 = new StringFormaterDecorator(binding_setter485,"{DataSource.excelGetEmprestimo!Emprestimo.ADDRESS1}");
            bind_dir485 = new BindDirection(this.DataCursorActivity17,binding_getter485,binding_setter485,BindTargetType.ToInProperty);
            _flow.HTTPActivity8.InDirections.Add(bind_dir485);
            XmlDocument HTTPActivity8_ExpectedResponseXmlBody_Document = new XmlDocument();
            HTTPActivity8_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            HTTPActivity8_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity8.ExpectedResponseXmlBody = HTTPActivity8_ExpectedResponseXmlBody_Document;
            XmlDocument HTTPActivity8_ExpectedResponseJsonBody_Document = new XmlDocument();
            HTTPActivity8_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            HTTPActivity8_ExpectedResponseJsonBody_Document.LoadXml(
@"<Array jsonType=""Array"" isAnonymous=""true""><Value jsonType=""String"" isAnonymous=""true"">status: accepted</Value></Array>");
            _flow.HTTPActivity8.ExpectedResponseJsonBody = HTTPActivity8_ExpectedResponseJsonBody_Document;
            XmlDocument HTTPActivity8_ExpectedOutputProperties_Document = new XmlDocument();
            HTTPActivity8_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            HTTPActivity8_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion /><StatusCode>200</StatusCode><StatusDescription /><ResponseBody /><ResponseBodyAsBase64 /></Arguments>");
            _flow.HTTPActivity8.ExpectedOutputProperties = HTTPActivity8_ExpectedOutputProperties_Document;
            set_HTTPActivity8_checkpoints(_flow.HTTPActivity8);
            _flow.HTTPActivity7.TextBody = @"";
            _flow.HTTPActivity7.TextXmlBody = @"";
            _flow.HTTPActivity7.FileBody = @"";
            _flow.HTTPActivity7.PostBody = @"";
            _flow.HTTPActivity7.Url = @"http://localhost:3434/cars-app/api/loanApp";
            _flow.HTTPActivity7.HttpMethod = @"GET";
            _flow.HTTPActivity7.HttpVersion = @"1.1";
            _flow.HTTPActivity7.RequestHeaders = new Pair<string, string>[2];
            _flow.HTTPActivity7.RequestHeaders[0] = new Pair<string, string>();
            _flow.HTTPActivity7.RequestHeaders[0].Key = @"Authorization";
            _flow.HTTPActivity7.RequestHeaders[0].Value = @"{Step.OutputProperties.ConcatenateStringsActivity6.Result}";
            _flow.HTTPActivity7.RequestHeaders[1] = new Pair<string, string>();
            _flow.HTTPActivity7.RequestHeaders[1].Key = @"Content-Type";
            _flow.HTTPActivity7.RequestHeaders[1].Value = @"application/json";
            _flow.HTTPActivity7.Comment = @"";
            _flow.HTTPActivity7.IconPath = @"AddIns\ServiceTest\HTTPActivity\toolbox_http.png";
            _flow.HTTPActivity7.RequestBodyType = @"Json";
            _flow.HTTPActivity7.ResponseType = @"Json";
            _flow.HTTPActivity7.Name = @"HTTP Request7";
            _flow.HTTPActivity7.Proxy.Server = @"";
            _flow.HTTPActivity7.Proxy.Username = @"";
            _flow.HTTPActivity7.Proxy.Password = @"";
            _flow.HTTPActivity7.Authentication.Username = @"";
            _flow.HTTPActivity7.Authentication.Password = @"";
            _flow.HTTPActivity7.Authentication.PreemptiveAuthentication = false;
            _flow.HTTPActivity7.ConnectionType = @"Keep-Alive";
            _flow.HTTPActivity7.Timeout = (int)100000;
            _flow.HTTPActivity7.ClientCertificate.Password = @"";
            _flow.HTTPActivity7.ClientCertificate.FileSystem.Path = @"";
            _flow.HTTPActivity7.UseClientCertificate = false;
            _flow.HTTPActivity7.MaximumAutomaticRedirections = (int)3;
            _flow.HTTPActivity7.AllowRedirections = true;
            _flow.HTTPActivity7.ReuseCookies = false;
            _flow.HTTPActivity7.ExpectServerError = false;
            _flow.HTTPActivity7.HanaRequest = false;
            XmlDocument HTTPActivity7_XMLBody_Document = new XmlDocument();
            HTTPActivity7_XMLBody_Document.PreserveWhitespace = true;
            HTTPActivity7_XMLBody_Document.LoadXml("<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity7.XMLBody = HTTPActivity7_XMLBody_Document;
            XmlDocument HTTPActivity7_RequestMultipartInfoXml_Document = new XmlDocument();
            HTTPActivity7_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            HTTPActivity7_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.HTTPActivity7.RequestMultipartInfoXml = HTTPActivity7_RequestMultipartInfoXml_Document;
            _flow.HTTPActivity7.Multipart=false;
            VTDPropertyInfoBase pi971 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter486 = new VTDObjectGetter(pi971);
            VTDPropertyInfoBase pi972 = new VTDPropertyInfoBase("RequestHeaders[0].Value");
            VTDBaseSetter binding_setter486 = new VTDObjectSetter(pi972);
            binding_setter486 = new StringFormaterDecorator(binding_setter486,"{Step.OutputProperties.ConcatenateStringsActivity6.Result}");
            bind_dir486 = new BindDirection(_flow.ConcatenateStringsActivity6,binding_getter486,binding_setter486,BindTargetType.ToInProperty);
            _flow.HTTPActivity7.InDirections.Add(bind_dir486);
            XmlDocument HTTPActivity7_ExpectedResponseXmlBody_Document = new XmlDocument();
            HTTPActivity7_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            HTTPActivity7_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity7.ExpectedResponseXmlBody = HTTPActivity7_ExpectedResponseXmlBody_Document;
            XmlDocument HTTPActivity7_ExpectedResponseJsonBody_Document = new XmlDocument();
            HTTPActivity7_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            HTTPActivity7_ExpectedResponseJsonBody_Document.LoadXml(
@"<Array jsonType=""Array"" isAnonymous=""true""><Object jsonType=""Object"" isAnonymous=""true""><class jsonType=""String"">com.ca.lisa.demo.CarLoan</class><id jsonType=""Integer"">7</id><address1 jsonType=""String"">Rua das Amoreiras</address1><city jsonType=""String"">São Paulo</city><country jsonType=""String"">BR</country><createdDate jsonType=""Date"">19/12/2023 15:20:12</createdDate><dob jsonType=""Date"">01/01/1980</dob><durationOfJob jsonType=""String"">5 Years</durationOfJob><employer jsonType=""String"">BN Technologies</employer><firstName jsonType=""String"">{DataSource.excelGetEmprestimo!Emprestimo.FIRSTNAME}</firstName><income jsonType=""Float"">70836</income><lastName jsonType=""String"">{DataSource.excelGetEmprestimo!Emprestimo.LASTNAME}</lastName><loanAmount jsonType=""Float"">50000</loanAmount><loanTerm jsonType=""Integer"">4</loanTerm><loanTermInMonths jsonType=""Integer"">48</loanTermInMonths><offers jsonType=""Array"" /><phoneNumber jsonType=""String"">123-456-7891</phoneNumber><ssn jsonType=""String"">111-22-3333</ssn><state jsonType=""String"">SP</state><username jsonType=""String"">{DataSource.excelGetEmprestimo!Emprestimo.USERNAME}</username><validateAddress jsonType=""Boolean"">false</validateAddress><zip jsonType=""String"">00025354</zip></Object></Array>");
            _flow.HTTPActivity7.ExpectedResponseJsonBody = HTTPActivity7_ExpectedResponseJsonBody_Document;
            XmlDocument HTTPActivity7_ExpectedOutputProperties_Document = new XmlDocument();
            HTTPActivity7_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            HTTPActivity7_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion /><StatusCode>200</StatusCode><StatusDescription /><ResponseBody /><ResponseBodyAsBase64 /></Arguments>");
            _flow.HTTPActivity7.ExpectedOutputProperties = HTTPActivity7_ExpectedOutputProperties_Document;
            VTDPropertyInfoBase pi973 = new VTDPropertyInfoBase("FIRSTNAME");
            VTDBaseGetter binding_getter487 = new VTDObjectGetter(pi973);
            VTDPropertyInfoBase pi974 = new VTDPropertyInfoBase("XMLResponse","/*[local-name(.)='Array'][1]/*[local-name(.)='Object'][1]/*[local-name(.)='firstName'][1]");
            VTDBaseSetter binding_setter487 = new VTDCheckpointSetter(XmlTypeCode.String);
            binding_setter487 = new StringFormaterDecorator(binding_setter487,"{DataSource.excelGetEmprestimo!Emprestimo.FIRSTNAME}");
            bind_dir487 = new BindDirection(this.DataCursorActivity17,binding_getter487,binding_setter487,BindTargetType.ToInProperty);
            VTDPropertyInfoBase pi975 = new VTDPropertyInfoBase("LASTNAME");
            VTDBaseGetter binding_getter488 = new VTDObjectGetter(pi975);
            VTDPropertyInfoBase pi976 = new VTDPropertyInfoBase("XMLResponse","/*[local-name(.)='Array'][1]/*[local-name(.)='Object'][1]/*[local-name(.)='lastName'][1]");
            VTDBaseSetter binding_setter488 = new VTDCheckpointSetter(XmlTypeCode.String);
            binding_setter488 = new StringFormaterDecorator(binding_setter488,"{DataSource.excelGetEmprestimo!Emprestimo.LASTNAME}");
            bind_dir488 = new BindDirection(this.DataCursorActivity17,binding_getter488,binding_setter488,BindTargetType.ToInProperty);
            VTDPropertyInfoBase pi977 = new VTDPropertyInfoBase("USERNAME");
            VTDBaseGetter binding_getter489 = new VTDObjectGetter(pi977);
            VTDPropertyInfoBase pi978 = new VTDPropertyInfoBase("XMLResponse","/*[local-name(.)='Array'][1]/*[local-name(.)='Object'][1]/*[local-name(.)='username'][1]");
            VTDBaseSetter binding_setter489 = new VTDCheckpointSetter(XmlTypeCode.String);
            binding_setter489 = new StringFormaterDecorator(binding_setter489,"{DataSource.excelGetEmprestimo!Emprestimo.USERNAME}");
            bind_dir489 = new BindDirection(this.DataCursorActivity17,binding_getter489,binding_setter489,BindTargetType.ToInProperty);
            set_HTTPActivity7_checkpoints(_flow.HTTPActivity7);
            
        }
        
        internal void InitializeEncryptionManagerValues()
        {
        
        }
        	
    	bool useReport = true;
    
    	protected override STExecutionResult ExecuteStep()
        {
            return base.ExecuteStep();
        }
    
        public void Start()
        {
    	    try
    		{
    		  Workflow_Executing();
    		  this.ExecuteStep();
    		}
    		finally
    		{
    		  WorkFlowScript_Completed();
    		}
        }
    
    	private void InitReport()
    	{
    		if (useReport)
    		{	
    			// Intialize Reporter
    			string reportDBDir = Path.Combine(this._context.ReportDirectory, @"Report");
    			CleanupReport(reportDBDir);        	
    			string reportDBPath = Path.Combine(reportDBDir, "VTDReport.mdb");        	
    			if (reporter == null)
    			{
    				reporter = new Reporter(reportDBPath);
    			}
    			_context.Reporter = reporter;
    		}
    	}
    
        public static void CopyDirectory(string Src, string Dst)
        {
            String[] Files;
    
            if (Dst[Dst.Length - 1] != Path.DirectorySeparatorChar)
                Dst += Path.DirectorySeparatorChar;
            if (!Directory.Exists(Dst)) Directory.CreateDirectory(Dst);
            Files = Directory.GetFileSystemEntries(Src);
            foreach (string Element in Files)
            {
                // Sub directories
                if (Directory.Exists(Element))
                    CopyDirectory(Element, Dst + Path.GetFileName(Element));
                // Files in directory
                else
                    File.Copy(Element, Dst + Path.GetFileName(Element), true);
            }
        }
        
        private void CleanupReport(string reportDBDir)
        {   
    		if (useReport)
    		{             
    			string reportTemplateDir = Path.Combine(ServiceTestRunner.GetInstallPath(), "bin", "ReportResources");
    			try
    			{
            		CopyDirectory(reportTemplateDir, reportDBDir);
    			}
    			catch //(Exception ex)
    			{
    				//ToDo: LoggingService.Warn("Report Cleanup Error", ex);
    			}
    		}
        }
    
        void Workflow_Executing()
        {   
        	InitReportNode();
                       
        }
    
    	private void InitReportNode()
    	{
    		if (useReport)
    		{	
        		// Init report creator
    			this.reportCreator = new HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator();
    			this.reportLevelInTree = reportCreator.Init(_context.EnvironmentProfile.GetVariableValue("TestName"), _context);
                
    			STActivityBase activity = this;
    			string workflowID = activity.GetHashCode().ToString();
    			ReportNodeCreationData newNodeData =
    			new ReportNodeCreationData(workflowID, workflowID, DateTime.Now);
    			reporter.CreateReportNode(newNodeData);
            
    			ReportInfoData newReportData = new ReportInfoData(workflowID, ReportKeywords.TypeKeywordTag, this.GetType().ToString());
    			reporter.SendReportData(newReportData);
    			newReportData = new ReportInfoData(workflowID, ReportKeywords.NameKeywordTag, this.Name);
    			//TrackData(ReportInfoData.InfoDataTag, newReportData);
    			reporter.SendReportData(newReportData);            
            }
    	}
        
        void WorkFlowScript_Completed()
        {   
    		
    
    		CreateReportFiles();
    					
        	// Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
    
    		OnExecutionCompleted();
    		
        }
    
    	private void CreateReportFiles()
    	{
    		if (useReport)
    		{	
    			//Dispose reporter inorder to close connection to report DB
           		this._context.Reporter.Dispose();
            	
           		// Run report creator
    			reportCreator.RunOnDBAndCreateFiles();
    		}
    	}
    
        
        void Workflow_Faulting()
        {
    		
    
    		CreateReportFiles();
            // Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
           
    		OnExecutionCompleted();
        }
    
    	protected override QcSystemVariables GetRuntimeQcVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeQcVariables(this._context);
    	}
            
    	protected override TestSystemVariables GetTestSystemVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeTestVariables(this._context);
    	}
    
    	private void UpdateTestSettings(ISTRunTimeContext ctx)
        {
    		ctx.PropertyBag["StopTestOnStepFailure"] = true;
    	}
    }
    
    public partial class VuserClass
    {
    	public static string[] CommandLineArguments;
    	public static string[] DotNetResolverPaths;
    	
        public VuserClass()
        {
    				
    		AssemblyResolver.AddSTPathsToResolutionPaths();
    		AssemblyResolver.AttachToAppdomain();
        }
    
        private void AddAssemblyResolver()
        {
    		AssemblyResolver.AddTestPathToResolutionPaths(GetTestPath());
    		AssemblyResolver.AddPathsForAssemblyResolution(DotNetResolverPaths);
        }
    	
        public int STAction()
        {	
            AddAssemblyResolver();
            STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
            WorkFlowScript script = new WorkFlowScript(ctx);
            script.InitializeComponent();
            script.Start();       
            
            return 0;
        }
        
        public void NotifyLicenseException(string msg)
        {
        		
    		try
    		{
    		    STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
                WorkFlowScript script = new WorkFlowScript(ctx);
                script.InitializeComponent();
                script.Context.ReplayClient.OnLicenseFailure(msg);
                
            }
            catch (Exception)
            {
    			// ToDo: log the error message
            }        
        }
    
    	 protected string GetTestPath()
            {
                if (CommandLineArguments != null)
                {
                    for (int i = 0; i < CommandLineArguments.Length; i++)
                    {
                        if (CommandLineArguments[i].Equals("-test", StringComparison.OrdinalIgnoreCase))
                        {
                            return CommandLineArguments[i + 1];
                        }
                    }
                }
                return String.Empty;
            }
        
    }
    
    }
    