/***************************************************************
    *  DO NOT EDIT THIS FILE!
    *         
    *  This file is automatically generated by HP Service Test.
    *  Manually changing the contents of this file may result in 
    *  loss of information.
    *          
    *  To edit the test, open the file ‘CriacaoCarroGet.st’ 
    *  in HP Service Test.
     ***************************************************************/
    
    namespace Script
    {
    using System;
    using System.Text;
    using System.Threading;
    using System.Xml;
    using System.Xml.Schema;
    using HP.ST.Fwk.ReporterFWK;
    using HP.ST.Shared.Utilities;
    using HP.ST.Ext.BindingImpl.Getters;
    using HP.ST.Ext.BindingImpl.Setters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.PropInfo;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Getters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Setters;
    using HP.ST.Fwk.RunTimeFWK;
    using HP.ST.Fwk.RunTimeFWK.Utilities;
    using HP.ST.Fwk.RunTimeFWK.HelperClasses;
    using HP.ST.Fwk.RunTimeFWK.CompositeActivities;
    using HP.ST.Ext.BindingImpl.Setters.DataSourceSetters;
    using HP.ST.Fwk.JVMLoader;
    using System.IO;
    using System.Collections.Generic;
    using System.Reflection;
    using HP.ST.Fwk.SOAReplayAPI;
    using HP.ST.Fwk.UFTLicensing;
    
    
    
    public partial class WorkFlowScript : STWorkFlowScriptBase
    {    
    	TestUserCode _userCode = null;
    	TestEntities _flow = null;
    	static Reporter reporter;
    	int reportLevelInTree;
        HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator reportCreator;
    	
    	public BindDirection bind_dir19 = null;
        public BindDirection bind_dir20 = null;
        public HP.ST.Ext.BasicActivities.DataCursorActivity DataCursorActivity11 = null;
        public BindDirection bind_dir21 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy DataCursorActivity11_Policy = null;
        public BindDirection bind_dir22 = null;
        public BindDirection bind_dir23 = null;
        public BindDirection bind_dir24 = null;
        public BindDirection bind_dir25 = null;
        public BindDirection bind_dir26 = null;
        public BindDirection bind_dir27 = null;
        public BindDirection bind_dir28 = null;
        public BindDirection bind_dir29 = null;
        public BindDirection bind_dir30 = null;
        public BindDirection bind_dir31 = null;
        public BindDirection bind_dir32 = null;
        public BindDirection bind_dir33 = null;
        public BindDirection bind_dir34 = null;
        public BindDirection bind_dir35 = null;
        public BindDirection bind_dir36 = null;
        
        public IEnumerable<FeaturesGroup> LicensedFeatures
        {
        
        get
        {
        List<FeaturesGroup> features = new List<FeaturesGroup>();
        return features;
        
        }
        
        }
        
        public WorkFlowScript()
            : base(VuserClass.CommandLineArguments, new STRunTimeContext(), "test")
        {	
        	UpdateContextWithActionFolder(String.Empty);
        	
        }
        
        public WorkFlowScript(ISTRunTimeContext ctx)
            : base(VuserClass.CommandLineArguments, ctx, "test")
            
        {
        	this._context = ctx;
        	UpdateContextWithActionFolder(String.Empty);
        	UpdateTestSettings(ctx);
        }
        
        internal void InitializeComponent()
        {
        	LoadInput();
        	
        	InitReport();
        	
        	InitializeEncryptionManagerValues();
        
        	_userCode = new TestUserCode();
            _flow = _userCode;
            _flow.Context=this._context;
            
            
        
        	_flow.DataFetchActivity7 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity7");
            _flow.StartActivity1 = new HP.ST.Ext.BasicActivities.StartActivity(_context,"StartActivity1");
            _flow.Loop2 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop2Input>(_context,"Loop2",LoopType.ForEach);
            _flow.DataExporterActivity9 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity9");
            _flow.DataExporterCloseActivity10 = new HP.ST.Ext.BasicActivities.DataExporterCloseActivity(_context,"DataExporterCloseActivity10");
            _flow.EndActivity3 = new HP.ST.Ext.BasicActivities.EndActivity(_context,"EndActivity3");
            _flow.DataDisconnectActivity8 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity8");
            this.DataCursorActivity11 = new HP.ST.Ext.BasicActivities.DataCursorActivity(_context,"DataCursorActivity11");
            this.DataCursorActivity11_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            _flow.Sequence6 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence6");
            _flow.HTTPActivity4 = new HP.ST.Ext.HTTPActivity.HTTPActivity(_context,"HTTPActivity4");
            _flow.HTTPActivity5 = new HP.ST.Ext.HTTPActivity.HTTPActivity(_context,"HTTPActivity5");
            _flow.DataFetchActivity7.Comment = @"";
            _flow.DataFetchActivity7.IconPath = @"";
            _flow.DataFetchActivity7.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity7.QueryClassName = @"HP.ST.Ext.CustomDataProviders.LocalDataQuery";
            XmlDocument DataFetchActivity7_QueryParameters_Document = new XmlDocument();
            DataFetchActivity7_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity7Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>36d0e103-d0fd-465f-97b7-624a09984f17</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>criaCarros</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value></Value></QueryParameter><QueryParameter><Name>TableStructure</Name><Value>stockNumber,String,|price,String,|milage,String,|owners,String,|modelYear,String,|color,String,|carTrim,String,|engine,String,|transmission,String,|vin,String,|options,String,|image1,String,|image2,String,</Value></QueryParameter><QueryParameter><Name>TableContents</Name><Value>5|35000|25000|1|2022|Black|123|12345|automatic|2233445566|no|image12|image13^2|57000|36000|2|2023|Red|456|67890|manual|7788990011|yes|image14|image15</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity7_QueryParameters_Document.LoadXml(xmlDataFetchActivity7Params);
            _flow.DataFetchActivity7.QueryParameters = DataFetchActivity7_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("criaCarros", _flow.DataFetchActivity7);
            this.Activities.Add (_flow.DataFetchActivity7);
            _flow.StartActivity1.Comment = @"";
            _flow.StartActivity1.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.StartActivity1.Name = @"Start";
            _flow.StartActivity1.JVM = new HP.ST.Ext.BasicActivities.JVMProperties();
            _flow.StartActivity1.IsJavaUsed = false;
            _flow.StartActivity1.JVM.Classpath = @"%CLASSPATH%";
            _flow.StartActivity1.JVM.AdditionalVMParameters = @"";
            _flow.StartActivity1.JMS = new HP.ST.Ext.BasicActivities.JMSProperties();
            _flow.StartActivity1.IsJmsUsed = false;
            _flow.StartActivity1.JMS.JNDIContextFactory = @"<Select...>";
            _flow.StartActivity1.JMS.JNDIProviderUrl = @"";
            _flow.StartActivity1.JMS.JMSConnectionFactory = @"";
            _flow.StartActivity1.JMS.SecurityPrincipal = @"";
            _flow.StartActivity1.JMS.SecurityCredentials = @"";
            _flow.StartActivity1.JMS.JMSClientID = @"";
            _flow.StartActivity1.JMS.SSLPassword = @"";
            _flow.StartActivity1.JMS.SSLTrustedCertificate = @"";
            _flow.StartActivity1.JMS.SSLIdentity = @"";
            _flow.StartActivity1.JMS.ConnectionsPerProcess = @"1";
            _flow.StartActivity1.JMS.TimeoutOptions = @"DN_User_defined_Timeout";
            _flow.StartActivity1.JMS.UserTimeout = @"20";
            _flow.StartActivity1.JMS.GenerateAutoSelector = @"No";
            _flow.StartActivity1.KafkaSSL = new HP.ST.Fwk.KafkaFWK.KafkaSSLProperties();
            _flow.StartActivity1.IsKafkaUsed = false;
            _flow.StartActivity1.KafkaSSL.StrEnableSSL = @"No";
            _flow.StartActivity1.KafkaSSL.SSLCALocation = @"";
            _flow.StartActivity1.KafkaSSL.SSLClientCertificateLocation = @"";
            _flow.StartActivity1.KafkaSSL.SSLClientKeyLocation = @"";
            _flow.StartActivity1.KafkaSASL = new HP.ST.Fwk.KafkaFWK.KafkaSASLProperties();
            _flow.StartActivity1.KafkaSASL.StrEnableSASL = @"No";
            _flow.StartActivity1.KafkaSASL.StrMechanism = @"GSSAPI";
            _flow.StartActivity1.KafkaSASL.StrServiceName = @"";
            this.Activities.Add (_flow.StartActivity1);
            _flow.Loop2.ConditionAsString = @"For each item in {DataSource.criaCarros}";
            _flow.Loop2.NumberOfIterations = (int)1;
            _flow.Loop2.Condition += delegate(object sender,STActivityBaseEventArgs e)
            {
            return !DataCursorActivity11.IsAtEndPosition;
            };
            _flow.Loop2.Comment = @"";
            _flow.Loop2.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop2.Name = @"Test Flow";
            _flow.Loop2.Activities.Add (this.DataCursorActivity11);
            _flow.Loop2.Activities.Add (_flow.Sequence6);
            this.Activities.Add (_flow.Loop2);
            _flow.DataExporterActivity9.Comment = @"";
            _flow.DataExporterActivity9.IconPath = @"";
            VTDPropertyInfoBase pi37 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter19 = new VTDObjectGetter(pi37);
            VTDPropertyInfoBase pi38 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter19 = new VTDObjectSetter(pi38);
            binding_setter19 = new StringFormaterDecorator(binding_setter19,"{Step.DataFetchActivity7.OutTable}");
            bind_dir19 = new BindDirection(_flow.DataFetchActivity7,binding_getter19,binding_setter19,BindTargetType.ToInProperty);
            _flow.DataExporterActivity9.InDirections.Add(bind_dir19);
            this.Activities.Add (_flow.DataExporterActivity9);
            _flow.DataExporterCloseActivity10.Comment = @"";
            _flow.DataExporterCloseActivity10.IconPath = @"";
            this.Activities.Add (_flow.DataExporterCloseActivity10);
            _flow.EndActivity3.Comment = @"";
            _flow.EndActivity3.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.EndActivity3.Name = @"End";
            this.Activities.Add (_flow.EndActivity3);
            _flow.DataDisconnectActivity8.Comment = @"";
            _flow.DataDisconnectActivity8.IconPath = @"";
            VTDPropertyInfoBase pi39 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter20 = new VTDObjectGetter(pi39);
            VTDPropertyInfoBase pi40 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter20 = new VTDObjectSetter(pi40);
            binding_setter20 = new StringFormaterDecorator(binding_setter20,"{Step.DataFetchActivity7.OutTable}");
            bind_dir20 = new BindDirection(_flow.DataFetchActivity7,binding_getter20,binding_setter20,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity8.InDirections.Add(bind_dir20);
            this.Activities.Add (_flow.DataDisconnectActivity8);
            this.DataCursorActivity11.Comment = @"";
            this.DataCursorActivity11.IconPath = @"";
            VTDPropertyInfoBase pi41 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter21 = new VTDObjectGetter(pi41);
            VTDPropertyInfoBase pi42 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter21 = new VTDObjectSetter(pi42);
            binding_setter21 = new StringFormaterDecorator(binding_setter21,"{Step.DataFetchActivity7.OutTable}");
            bind_dir21 = new BindDirection(_flow.DataFetchActivity7,binding_getter21,binding_setter21,BindTargetType.ToInProperty);
            this.DataCursorActivity11.InDirections.Add(bind_dir21);
            this.DataCursorActivity11_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.DataCursorActivity11_Policy.StartAtSpecificRow = 1;
            this.DataCursorActivity11_Policy.StartCondition.ColumnName = "";
            this.DataCursorActivity11_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity11_Policy.StartCondition.Value = "";
            this.DataCursorActivity11_Policy.EndPosition = CursorEndPosition.LastRecord;
            this.DataCursorActivity11_Policy.EndAtSpecificRow = 1;
            this.DataCursorActivity11_Policy.EndCondition.ColumnName = "";
            this.DataCursorActivity11_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity11_Policy.EndCondition.Value = "";
            this.DataCursorActivity11_Policy.StepType = CursorStepType.Forward;
            this.DataCursorActivity11_Policy.StepSize = 1;
            this.DataCursorActivity11_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.DataCursorActivity11.Policy = this.DataCursorActivity11_Policy;
            this.DataCursorActivity11.ReportStepData = true;
            _flow.Loop2.BeforeExecuteStepEvent += this.DataCursorActivity11.ResetCursor;
            _flow.Sequence6.Comment = @"";
            _flow.Sequence6.IconPath = @"";
            _flow.Sequence6.Name = @"Sequence6";
            _flow.Sequence6.Activities.Add (_flow.HTTPActivity4);
            _flow.Sequence6.Activities.Add (_flow.HTTPActivity5);
            _flow.HTTPActivity4.TextBody = @"";
            _flow.HTTPActivity4.TextXmlBody = @"";
            _flow.HTTPActivity4.FileBody = @"";
            _flow.HTTPActivity4.PostBody = @"";
            _flow.HTTPActivity4.Url = @"http://localhost:3434/cars-app/carShop/cars";
            _flow.HTTPActivity4.HttpMethod = @"POST";
            _flow.HTTPActivity4.HttpVersion = @"1.1";
            _flow.HTTPActivity4.RequestHeaders = new Pair<string, string>[1];
            _flow.HTTPActivity4.RequestHeaders[0] = new Pair<string, string>();
            _flow.HTTPActivity4.RequestHeaders[0].Key = @"Content-Type";
            _flow.HTTPActivity4.RequestHeaders[0].Value = @"application/json";
            _flow.HTTPActivity4.Comment = @"";
            _flow.HTTPActivity4.IconPath = @"AddIns\ServiceTest\HTTPActivity\toolbox_http.png";
            _flow.HTTPActivity4.RequestBodyType = @"Json";
            _flow.HTTPActivity4.ResponseType = @"Json";
            _flow.HTTPActivity4.Name = @"HTTP Request4";
            _flow.HTTPActivity4.Proxy.Server = @"";
            _flow.HTTPActivity4.Proxy.Username = @"";
            _flow.HTTPActivity4.Proxy.Password = @"";
            _flow.HTTPActivity4.Authentication.Username = @"";
            _flow.HTTPActivity4.Authentication.Password = @"";
            _flow.HTTPActivity4.Authentication.PreemptiveAuthentication = false;
            _flow.HTTPActivity4.ConnectionType = @"Keep-Alive";
            _flow.HTTPActivity4.Timeout = (int)100000;
            _flow.HTTPActivity4.ClientCertificate.Password = @"";
            _flow.HTTPActivity4.ClientCertificate.FileSystem.Path = @"";
            _flow.HTTPActivity4.UseClientCertificate = false;
            _flow.HTTPActivity4.MaximumAutomaticRedirections = (int)3;
            _flow.HTTPActivity4.AllowRedirections = true;
            _flow.HTTPActivity4.ReuseCookies = false;
            _flow.HTTPActivity4.ExpectServerError = false;
            _flow.HTTPActivity4.HanaRequest = false;
            XmlDocument HTTPActivity4_XMLBody_Document = new XmlDocument();
            HTTPActivity4_XMLBody_Document.PreserveWhitespace = true;
            HTTPActivity4_XMLBody_Document.LoadXml(
@"<Object jsonType=""Object"" isAnonymous=""true""><dealer jsonType=""Object""><class jsonType=""String"">com.ca.lisa.demo.CarDealer</class><id jsonType=""Integer"">4</id><address jsonType=""String"">1673 Blake Rd</address><city jsonType=""String"">Aurora</city><name jsonType=""String"">Aurora Acura</name><state jsonType=""String"">CO</state><telephone jsonType=""String"">303-955-0134</telephone><website jsonType=""String"">www.aurora_acura.com</website><zip jsonType=""String"">80203</zip></dealer><model jsonType=""Object""><class jsonType=""String"">com.ca.lisa.demo.CarModel</class><id jsonType=""Integer"">5</id><fuelType jsonType=""String"">Gas</fuelType><make jsonType=""Object""><class jsonType=""String"">com.ca.lisa.demo.CarMake</class><id jsonType=""Integer"">1</id><name jsonType=""String"">Acura</name></make><modelYear jsonType=""Integer"">1996</modelYear><name jsonType=""String"">TL-AWD</name><subName jsonType=""String"">SH-AWD</subName><type jsonType=""Object""><class jsonType=""String"">com.ca.lisa.demo.CarType</class><id jsonType=""Integer"">7</id><name jsonType=""String"">Sedan</name></type></model><stockNumber jsonType=""String"">{DataSource.criaCarros.stockNumber}</stockNumber><price jsonType=""String"">{DataSource.criaCarros.price}</price><milage jsonType=""String"">{DataSource.criaCarros.milage}</milage><owners jsonType=""String"">{DataSource.criaCarros.owners}</owners><modelYear jsonType=""String"">{DataSource.criaCarros.modelYear}</modelYear><color jsonType=""String"">{DataSource.criaCarros.color}</color><carTrim jsonType=""String"">{DataSource.criaCarros.carTrim}</carTrim><engine jsonType=""String"">{DataSource.criaCarros.engine}</engine><transmission jsonType=""String"">{DataSource.criaCarros.transmission}</transmission><vin jsonType=""String"">{DataSource.criaCarros.vin}</vin><options jsonType=""String"">{DataSource.criaCarros.options}</options><image1 jsonType=""String"">{DataSource.criaCarros.image1}</image1><image2 jsonType=""String"">{DataSource.criaCarros.image2}</image2></Object>");
            _flow.HTTPActivity4.XMLBody = HTTPActivity4_XMLBody_Document;
            XmlDocument HTTPActivity4_RequestMultipartInfoXml_Document = new XmlDocument();
            HTTPActivity4_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            HTTPActivity4_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.HTTPActivity4.RequestMultipartInfoXml = HTTPActivity4_RequestMultipartInfoXml_Document;
            _flow.HTTPActivity4.Multipart=false;
            VTDPropertyInfoBase pi43 = new VTDPropertyInfoBase("vin");
            VTDBaseGetter binding_getter22 = new VTDObjectGetter(pi43);
            VTDPropertyInfoBase pi44 = new VTDPropertyInfoBase("XMLBody","/*[local-name(.)='Object'][1]/*[local-name(.)='vin'][1]");
            VTDBaseSetter binding_setter22 = new VTDJsonSetter(pi44,XmlTypeCode.String);
            binding_setter22 = new StringFormaterDecorator(binding_setter22,"{DataSource.criaCarros.vin}");
            bind_dir22 = new BindDirection(this.DataCursorActivity11,binding_getter22,binding_setter22,BindTargetType.ToInProperty);
            _flow.HTTPActivity4.InDirections.Add(bind_dir22);
            VTDPropertyInfoBase pi45 = new VTDPropertyInfoBase("transmission");
            VTDBaseGetter binding_getter23 = new VTDObjectGetter(pi45);
            VTDPropertyInfoBase pi46 = new VTDPropertyInfoBase("XMLBody","/*[local-name(.)='Object'][1]/*[local-name(.)='transmission'][1]");
            VTDBaseSetter binding_setter23 = new VTDJsonSetter(pi46,XmlTypeCode.String);
            binding_setter23 = new StringFormaterDecorator(binding_setter23,"{DataSource.criaCarros.transmission}");
            bind_dir23 = new BindDirection(this.DataCursorActivity11,binding_getter23,binding_setter23,BindTargetType.ToInProperty);
            _flow.HTTPActivity4.InDirections.Add(bind_dir23);
            VTDPropertyInfoBase pi47 = new VTDPropertyInfoBase("stockNumber");
            VTDBaseGetter binding_getter24 = new VTDObjectGetter(pi47);
            VTDPropertyInfoBase pi48 = new VTDPropertyInfoBase("XMLBody","/*[local-name(.)='Object'][1]/*[local-name(.)='stockNumber'][1]");
            VTDBaseSetter binding_setter24 = new VTDJsonSetter(pi48,XmlTypeCode.String);
            binding_setter24 = new StringFormaterDecorator(binding_setter24,"{DataSource.criaCarros.stockNumber}");
            bind_dir24 = new BindDirection(this.DataCursorActivity11,binding_getter24,binding_setter24,BindTargetType.ToInProperty);
            _flow.HTTPActivity4.InDirections.Add(bind_dir24);
            VTDPropertyInfoBase pi49 = new VTDPropertyInfoBase("price");
            VTDBaseGetter binding_getter25 = new VTDObjectGetter(pi49);
            VTDPropertyInfoBase pi50 = new VTDPropertyInfoBase("XMLBody","/*[local-name(.)='Object'][1]/*[local-name(.)='price'][1]");
            VTDBaseSetter binding_setter25 = new VTDJsonSetter(pi50,XmlTypeCode.String);
            binding_setter25 = new StringFormaterDecorator(binding_setter25,"{DataSource.criaCarros.price}");
            bind_dir25 = new BindDirection(this.DataCursorActivity11,binding_getter25,binding_setter25,BindTargetType.ToInProperty);
            _flow.HTTPActivity4.InDirections.Add(bind_dir25);
            VTDPropertyInfoBase pi51 = new VTDPropertyInfoBase("owners");
            VTDBaseGetter binding_getter26 = new VTDObjectGetter(pi51);
            VTDPropertyInfoBase pi52 = new VTDPropertyInfoBase("XMLBody","/*[local-name(.)='Object'][1]/*[local-name(.)='owners'][1]");
            VTDBaseSetter binding_setter26 = new VTDJsonSetter(pi52,XmlTypeCode.String);
            binding_setter26 = new StringFormaterDecorator(binding_setter26,"{DataSource.criaCarros.owners}");
            bind_dir26 = new BindDirection(this.DataCursorActivity11,binding_getter26,binding_setter26,BindTargetType.ToInProperty);
            _flow.HTTPActivity4.InDirections.Add(bind_dir26);
            VTDPropertyInfoBase pi53 = new VTDPropertyInfoBase("options");
            VTDBaseGetter binding_getter27 = new VTDObjectGetter(pi53);
            VTDPropertyInfoBase pi54 = new VTDPropertyInfoBase("XMLBody","/*[local-name(.)='Object'][1]/*[local-name(.)='options'][1]");
            VTDBaseSetter binding_setter27 = new VTDJsonSetter(pi54,XmlTypeCode.String);
            binding_setter27 = new StringFormaterDecorator(binding_setter27,"{DataSource.criaCarros.options}");
            bind_dir27 = new BindDirection(this.DataCursorActivity11,binding_getter27,binding_setter27,BindTargetType.ToInProperty);
            _flow.HTTPActivity4.InDirections.Add(bind_dir27);
            VTDPropertyInfoBase pi55 = new VTDPropertyInfoBase("modelYear");
            VTDBaseGetter binding_getter28 = new VTDObjectGetter(pi55);
            VTDPropertyInfoBase pi56 = new VTDPropertyInfoBase("XMLBody","/*[local-name(.)='Object'][1]/*[local-name(.)='modelYear'][1]");
            VTDBaseSetter binding_setter28 = new VTDJsonSetter(pi56,XmlTypeCode.String);
            binding_setter28 = new StringFormaterDecorator(binding_setter28,"{DataSource.criaCarros.modelYear}");
            bind_dir28 = new BindDirection(this.DataCursorActivity11,binding_getter28,binding_setter28,BindTargetType.ToInProperty);
            _flow.HTTPActivity4.InDirections.Add(bind_dir28);
            VTDPropertyInfoBase pi57 = new VTDPropertyInfoBase("milage");
            VTDBaseGetter binding_getter29 = new VTDObjectGetter(pi57);
            VTDPropertyInfoBase pi58 = new VTDPropertyInfoBase("XMLBody","/*[local-name(.)='Object'][1]/*[local-name(.)='milage'][1]");
            VTDBaseSetter binding_setter29 = new VTDJsonSetter(pi58,XmlTypeCode.String);
            binding_setter29 = new StringFormaterDecorator(binding_setter29,"{DataSource.criaCarros.milage}");
            bind_dir29 = new BindDirection(this.DataCursorActivity11,binding_getter29,binding_setter29,BindTargetType.ToInProperty);
            _flow.HTTPActivity4.InDirections.Add(bind_dir29);
            VTDPropertyInfoBase pi59 = new VTDPropertyInfoBase("image2");
            VTDBaseGetter binding_getter30 = new VTDObjectGetter(pi59);
            VTDPropertyInfoBase pi60 = new VTDPropertyInfoBase("XMLBody","/*[local-name(.)='Object'][1]/*[local-name(.)='image2'][1]");
            VTDBaseSetter binding_setter30 = new VTDJsonSetter(pi60,XmlTypeCode.String);
            binding_setter30 = new StringFormaterDecorator(binding_setter30,"{DataSource.criaCarros.image2}");
            bind_dir30 = new BindDirection(this.DataCursorActivity11,binding_getter30,binding_setter30,BindTargetType.ToInProperty);
            _flow.HTTPActivity4.InDirections.Add(bind_dir30);
            VTDPropertyInfoBase pi61 = new VTDPropertyInfoBase("image1");
            VTDBaseGetter binding_getter31 = new VTDObjectGetter(pi61);
            VTDPropertyInfoBase pi62 = new VTDPropertyInfoBase("XMLBody","/*[local-name(.)='Object'][1]/*[local-name(.)='image1'][1]");
            VTDBaseSetter binding_setter31 = new VTDJsonSetter(pi62,XmlTypeCode.String);
            binding_setter31 = new StringFormaterDecorator(binding_setter31,"{DataSource.criaCarros.image1}");
            bind_dir31 = new BindDirection(this.DataCursorActivity11,binding_getter31,binding_setter31,BindTargetType.ToInProperty);
            _flow.HTTPActivity4.InDirections.Add(bind_dir31);
            VTDPropertyInfoBase pi63 = new VTDPropertyInfoBase("engine");
            VTDBaseGetter binding_getter32 = new VTDObjectGetter(pi63);
            VTDPropertyInfoBase pi64 = new VTDPropertyInfoBase("XMLBody","/*[local-name(.)='Object'][1]/*[local-name(.)='engine'][1]");
            VTDBaseSetter binding_setter32 = new VTDJsonSetter(pi64,XmlTypeCode.String);
            binding_setter32 = new StringFormaterDecorator(binding_setter32,"{DataSource.criaCarros.engine}");
            bind_dir32 = new BindDirection(this.DataCursorActivity11,binding_getter32,binding_setter32,BindTargetType.ToInProperty);
            _flow.HTTPActivity4.InDirections.Add(bind_dir32);
            VTDPropertyInfoBase pi65 = new VTDPropertyInfoBase("color");
            VTDBaseGetter binding_getter33 = new VTDObjectGetter(pi65);
            VTDPropertyInfoBase pi66 = new VTDPropertyInfoBase("XMLBody","/*[local-name(.)='Object'][1]/*[local-name(.)='color'][1]");
            VTDBaseSetter binding_setter33 = new VTDJsonSetter(pi66,XmlTypeCode.String);
            binding_setter33 = new StringFormaterDecorator(binding_setter33,"{DataSource.criaCarros.color}");
            bind_dir33 = new BindDirection(this.DataCursorActivity11,binding_getter33,binding_setter33,BindTargetType.ToInProperty);
            _flow.HTTPActivity4.InDirections.Add(bind_dir33);
            VTDPropertyInfoBase pi67 = new VTDPropertyInfoBase("carTrim");
            VTDBaseGetter binding_getter34 = new VTDObjectGetter(pi67);
            VTDPropertyInfoBase pi68 = new VTDPropertyInfoBase("XMLBody","/*[local-name(.)='Object'][1]/*[local-name(.)='carTrim'][1]");
            VTDBaseSetter binding_setter34 = new VTDJsonSetter(pi68,XmlTypeCode.String);
            binding_setter34 = new StringFormaterDecorator(binding_setter34,"{DataSource.criaCarros.carTrim}");
            bind_dir34 = new BindDirection(this.DataCursorActivity11,binding_getter34,binding_setter34,BindTargetType.ToInProperty);
            _flow.HTTPActivity4.InDirections.Add(bind_dir34);
            XmlDocument HTTPActivity4_ExpectedResponseXmlBody_Document = new XmlDocument();
            HTTPActivity4_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            HTTPActivity4_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity4.ExpectedResponseXmlBody = HTTPActivity4_ExpectedResponseXmlBody_Document;
            XmlDocument HTTPActivity4_ExpectedResponseJsonBody_Document = new XmlDocument();
            HTTPActivity4_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            HTTPActivity4_ExpectedResponseJsonBody_Document.LoadXml(
@"<Object jsonType=""Object"" isAnonymous=""true""><class jsonType=""String"">com.ca.lisa.demo.CarInventory</class><id jsonType=""Integer"">16</id><carTrim jsonType=""String"">2</carTrim><color jsonType=""String"">Black</color><dealer jsonType=""Object""><class jsonType=""String"">com.ca.lisa.demo.CarDealer</class><id jsonType=""Integer"">4</id></dealer><engine jsonType=""String"">sport</engine><image1 jsonType=""String"">image1</image1><image2 jsonType=""String"">image2</image2><makeid jsonType=""Integer"">0</makeid><milage jsonType=""Integer"">55</milage><model jsonType=""Object""><class jsonType=""String"">com.ca.lisa.demo.CarModel</class><id jsonType=""Integer"">5</id></model><modelYear jsonType=""Integer"">2023</modelYear><modelid jsonType=""Integer"">0</modelid><options jsonType=""String"">ok</options><owners jsonType=""Integer"">2</owners><price jsonType=""Float"">50000</price><stockNumber jsonType=""String"">2</stockNumber><transmission jsonType=""String"">automatic</transmission><vin jsonType=""String"">{DataSource.criaCarros.vin}</vin></Object>");
            _flow.HTTPActivity4.ExpectedResponseJsonBody = HTTPActivity4_ExpectedResponseJsonBody_Document;
            XmlDocument HTTPActivity4_ExpectedOutputProperties_Document = new XmlDocument();
            HTTPActivity4_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            HTTPActivity4_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion /><StatusCode /><StatusDescription /><ResponseBody /><ResponseBodyAsBase64 /></Arguments>");
            _flow.HTTPActivity4.ExpectedOutputProperties = HTTPActivity4_ExpectedOutputProperties_Document;
            VTDPropertyInfoBase pi69 = new VTDPropertyInfoBase("vin");
            VTDBaseGetter binding_getter35 = new VTDObjectGetter(pi69);
            VTDPropertyInfoBase pi70 = new VTDPropertyInfoBase("XMLResponse","/*[local-name(.)='Object'][1]/*[local-name(.)='vin'][1]");
            VTDBaseSetter binding_setter35 = new VTDCheckpointSetter(XmlTypeCode.String);
            binding_setter35 = new StringFormaterDecorator(binding_setter35,"{DataSource.criaCarros.vin}");
            bind_dir35 = new BindDirection(this.DataCursorActivity11,binding_getter35,binding_setter35,BindTargetType.ToInProperty);
            set_HTTPActivity4_checkpoints(_flow.HTTPActivity4);
            _flow.HTTPActivity5.TextBody = @"";
            _flow.HTTPActivity5.TextXmlBody = @"";
            _flow.HTTPActivity5.FileBody = @"";
            _flow.HTTPActivity5.PostBody = @"";
            _flow.HTTPActivity5.Url = @"http://localhost:3434/cars-app/carShop/cars";
            _flow.HTTPActivity5.HttpMethod = @"GET";
            _flow.HTTPActivity5.HttpVersion = @"1.1";
            _flow.HTTPActivity5.Comment = @"";
            _flow.HTTPActivity5.IconPath = @"AddIns\ServiceTest\HTTPActivity\toolbox_http.png";
            _flow.HTTPActivity5.RequestBodyType = @"Text";
            _flow.HTTPActivity5.ResponseType = @"Json";
            _flow.HTTPActivity5.Name = @"HTTP Request5";
            _flow.HTTPActivity5.Proxy.Server = @"";
            _flow.HTTPActivity5.Proxy.Username = @"";
            _flow.HTTPActivity5.Proxy.Password = @"";
            _flow.HTTPActivity5.Authentication.Username = @"";
            _flow.HTTPActivity5.Authentication.Password = @"";
            _flow.HTTPActivity5.Authentication.PreemptiveAuthentication = false;
            _flow.HTTPActivity5.ConnectionType = @"Keep-Alive";
            _flow.HTTPActivity5.Timeout = (int)100000;
            _flow.HTTPActivity5.ClientCertificate.Password = @"";
            _flow.HTTPActivity5.ClientCertificate.FileSystem.Path = @"";
            _flow.HTTPActivity5.UseClientCertificate = false;
            _flow.HTTPActivity5.MaximumAutomaticRedirections = (int)3;
            _flow.HTTPActivity5.AllowRedirections = true;
            _flow.HTTPActivity5.ReuseCookies = false;
            _flow.HTTPActivity5.ExpectServerError = false;
            _flow.HTTPActivity5.HanaRequest = false;
            XmlDocument HTTPActivity5_XMLBody_Document = new XmlDocument();
            HTTPActivity5_XMLBody_Document.PreserveWhitespace = true;
            HTTPActivity5_XMLBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity5.XMLBody = HTTPActivity5_XMLBody_Document;
            XmlDocument HTTPActivity5_RequestMultipartInfoXml_Document = new XmlDocument();
            HTTPActivity5_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            HTTPActivity5_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.HTTPActivity5.RequestMultipartInfoXml = HTTPActivity5_RequestMultipartInfoXml_Document;
            _flow.HTTPActivity5.Multipart=false;
            XmlDocument HTTPActivity5_ExpectedResponseXmlBody_Document = new XmlDocument();
            HTTPActivity5_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            HTTPActivity5_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity5.ExpectedResponseXmlBody = HTTPActivity5_ExpectedResponseXmlBody_Document;
            XmlDocument HTTPActivity5_ExpectedResponseJsonBody_Document = new XmlDocument();
            HTTPActivity5_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            HTTPActivity5_ExpectedResponseJsonBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity5.ExpectedResponseJsonBody = HTTPActivity5_ExpectedResponseJsonBody_Document;
            XmlDocument HTTPActivity5_ExpectedOutputProperties_Document = new XmlDocument();
            HTTPActivity5_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            HTTPActivity5_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion /><StatusCode /><StatusDescription /><ResponseBody>{DataSource.criaCarros.vin}</ResponseBody><ResponseBodyAsBase64 /></Arguments>");
            _flow.HTTPActivity5.ExpectedOutputProperties = HTTPActivity5_ExpectedOutputProperties_Document;
            VTDPropertyInfoBase pi71 = new VTDPropertyInfoBase("vin");
            VTDBaseGetter binding_getter36 = new VTDObjectGetter(pi71);
            VTDPropertyInfoBase pi72 = new VTDPropertyInfoBase("ResponseBody");
            VTDBaseSetter binding_setter36 = new VTDCheckpointSetter(XmlTypeCode.String);
            binding_setter36 = new StringFormaterDecorator(binding_setter36,"{DataSource.criaCarros.vin}");
            bind_dir36 = new BindDirection(this.DataCursorActivity11,binding_getter36,binding_setter36,BindTargetType.ToInProperty);
            set_HTTPActivity5_checkpoints(_flow.HTTPActivity5);
            
        }
        
        internal void InitializeEncryptionManagerValues()
        {
        
        }
        	
    	bool useReport = true;
    
    	protected override STExecutionResult ExecuteStep()
        {
            return base.ExecuteStep();
        }
    
        public void Start()
        {
    	    try
    		{
    		  Workflow_Executing();
    		  this.ExecuteStep();
    		}
    		finally
    		{
    		  WorkFlowScript_Completed();
    		}
        }
    
    	private void InitReport()
    	{
    		if (useReport)
    		{	
    			// Intialize Reporter
    			string reportDBDir = Path.Combine(this._context.ReportDirectory, @"Report");
    			CleanupReport(reportDBDir);        	
    			string reportDBPath = Path.Combine(reportDBDir, "VTDReport.mdb");        	
    			if (reporter == null)
    			{
    				reporter = new Reporter(reportDBPath);
    			}
    			_context.Reporter = reporter;
    		}
    	}
    
        public static void CopyDirectory(string Src, string Dst)
        {
            String[] Files;
    
            if (Dst[Dst.Length - 1] != Path.DirectorySeparatorChar)
                Dst += Path.DirectorySeparatorChar;
            if (!Directory.Exists(Dst)) Directory.CreateDirectory(Dst);
            Files = Directory.GetFileSystemEntries(Src);
            foreach (string Element in Files)
            {
                // Sub directories
                if (Directory.Exists(Element))
                    CopyDirectory(Element, Dst + Path.GetFileName(Element));
                // Files in directory
                else
                    File.Copy(Element, Dst + Path.GetFileName(Element), true);
            }
        }
        
        private void CleanupReport(string reportDBDir)
        {   
    		if (useReport)
    		{             
    			string reportTemplateDir = Path.Combine(ServiceTestRunner.GetInstallPath(), "bin", "ReportResources");
    			try
    			{
            		CopyDirectory(reportTemplateDir, reportDBDir);
    			}
    			catch //(Exception ex)
    			{
    				//ToDo: LoggingService.Warn("Report Cleanup Error", ex);
    			}
    		}
        }
    
        void Workflow_Executing()
        {   
        	InitReportNode();
                       
        }
    
    	private void InitReportNode()
    	{
    		if (useReport)
    		{	
        		// Init report creator
    			this.reportCreator = new HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator();
    			this.reportLevelInTree = reportCreator.Init(_context.EnvironmentProfile.GetVariableValue("TestName"), _context);
                
    			STActivityBase activity = this;
    			string workflowID = activity.GetHashCode().ToString();
    			ReportNodeCreationData newNodeData =
    			new ReportNodeCreationData(workflowID, workflowID, DateTime.Now);
    			reporter.CreateReportNode(newNodeData);
            
    			ReportInfoData newReportData = new ReportInfoData(workflowID, ReportKeywords.TypeKeywordTag, this.GetType().ToString());
    			reporter.SendReportData(newReportData);
    			newReportData = new ReportInfoData(workflowID, ReportKeywords.NameKeywordTag, this.Name);
    			//TrackData(ReportInfoData.InfoDataTag, newReportData);
    			reporter.SendReportData(newReportData);            
            }
    	}
        
        void WorkFlowScript_Completed()
        {   
    		
    
    		CreateReportFiles();
    					
        	// Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
    
    		OnExecutionCompleted();
    		
        }
    
    	private void CreateReportFiles()
    	{
    		if (useReport)
    		{	
    			//Dispose reporter inorder to close connection to report DB
           		this._context.Reporter.Dispose();
            	
           		// Run report creator
    			reportCreator.RunOnDBAndCreateFiles();
    		}
    	}
    
        
        void Workflow_Faulting()
        {
    		
    
    		CreateReportFiles();
            // Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
           
    		OnExecutionCompleted();
        }
    
    	protected override QcSystemVariables GetRuntimeQcVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeQcVariables(this._context);
    	}
            
    	protected override TestSystemVariables GetTestSystemVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeTestVariables(this._context);
    	}
    
    	private void UpdateTestSettings(ISTRunTimeContext ctx)
        {
    		ctx.PropertyBag["StopTestOnStepFailure"] = true;
    	}
    }
    
    public partial class VuserClass
    {
    	public static string[] CommandLineArguments;
    	public static string[] DotNetResolverPaths;
    	
        public VuserClass()
        {
    				
    		AssemblyResolver.AddSTPathsToResolutionPaths();
    		AssemblyResolver.AttachToAppdomain();
        }
    
        private void AddAssemblyResolver()
        {
    		AssemblyResolver.AddTestPathToResolutionPaths(GetTestPath());
    		AssemblyResolver.AddPathsForAssemblyResolution(DotNetResolverPaths);
        }
    	
        public int STAction()
        {	
            AddAssemblyResolver();
            STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
            WorkFlowScript script = new WorkFlowScript(ctx);
            script.InitializeComponent();
            script.Start();       
            
            return 0;
        }
        
        public void NotifyLicenseException(string msg)
        {
        		
    		try
    		{
    		    STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
                WorkFlowScript script = new WorkFlowScript(ctx);
                script.InitializeComponent();
                script.Context.ReplayClient.OnLicenseFailure(msg);
                
            }
            catch (Exception)
            {
    			// ToDo: log the error message
            }        
        }
    
    	 protected string GetTestPath()
            {
                if (CommandLineArguments != null)
                {
                    for (int i = 0; i < CommandLineArguments.Length; i++)
                    {
                        if (CommandLineArguments[i].Equals("-test", StringComparison.OrdinalIgnoreCase))
                        {
                            return CommandLineArguments[i + 1];
                        }
                    }
                }
                return String.Empty;
            }
        
    }
    
    }
    