/***************************************************************
    *  DO NOT EDIT THIS FILE!
    *         
    *  This file is automatically generated by HP Service Test.
    *  Manually changing the contents of this file may result in 
    *  loss of information.
    *          
    *  To edit the test, open the file ‘EmprestimoTeste.st’ 
    *  in HP Service Test.
     ***************************************************************/
    
    namespace Script
    {
    using System;
    using System.Text;
    using System.Threading;
    using System.Xml;
    using System.Xml.Schema;
    using HP.ST.Fwk.ReporterFWK;
    using HP.ST.Shared.Utilities;
    using HP.ST.Ext.BindingImpl.Getters;
    using HP.ST.Ext.BindingImpl.Setters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.PropInfo;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Getters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Setters;
    using HP.ST.Fwk.RunTimeFWK;
    using HP.ST.Fwk.RunTimeFWK.Utilities;
    using HP.ST.Fwk.RunTimeFWK.HelperClasses;
    using HP.ST.Fwk.RunTimeFWK.CompositeActivities;
    using HP.ST.Ext.BindingImpl.Setters.DataSourceSetters;
    using HP.ST.Fwk.JVMLoader;
    using System.IO;
    using System.Collections.Generic;
    using System.Reflection;
    using HP.ST.Fwk.SOAReplayAPI;
    using HP.ST.Fwk.UFTLicensing;
    
    
    
    public partial class WorkFlowScript : STWorkFlowScriptBase
    {    
    	TestUserCode _userCode = null;
    	TestEntities _flow = null;
    	static Reporter reporter;
    	int reportLevelInTree;
        HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator reportCreator;
    	
    	public BindDirection bind_dir150 = null;
        public BindDirection bind_dir151 = null;
        public BindDirection bind_dir152 = null;
        public BindDirection bind_dir153 = null;
        public HP.ST.Ext.BasicActivities.DataCursorActivity DataCursorActivity17 = null;
        public BindDirection bind_dir154 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy DataCursorActivity17_Policy = null;
        public HP.ST.Ext.BasicActivities.DataCursorActivity DataCursorActivity18 = null;
        public BindDirection bind_dir155 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy DataCursorActivity18_Policy = null;
        public BindDirection bind_dir156 = null;
        public BindDirection bind_dir157 = null;
        public BindDirection bind_dir158 = null;
        public BindDirection bind_dir159 = null;
        public BindDirection bind_dir160 = null;
        public BindDirection bind_dir161 = null;
        public BindDirection bind_dir162 = null;
        public BindDirection bind_dir163 = null;
        public BindDirection bind_dir164 = null;
        public BindDirection bind_dir165 = null;
        public BindDirection bind_dir166 = null;
        public BindDirection bind_dir167 = null;
        public BindDirection bind_dir168 = null;
        public BindDirection bind_dir169 = null;
        public BindDirection bind_dir170 = null;
        public BindDirection bind_dir171 = null;
        public BindDirection bind_dir172 = null;
        public BindDirection bind_dir173 = null;
        public BindDirection bind_dir174 = null;
        public BindDirection bind_dir175 = null;
        public BindDirection bind_dir176 = null;
        public BindDirection bind_dir177 = null;
        public BindDirection bind_dir178 = null;
        public BindDirection bind_dir179 = null;
        
        public IEnumerable<FeaturesGroup> LicensedFeatures
        {
        
        get
        {
        List<FeaturesGroup> features = new List<FeaturesGroup>();
        return features;
        
        }
        
        }
        
        public WorkFlowScript()
            : base(VuserClass.CommandLineArguments, new STRunTimeContext(), "test")
        {	
        	UpdateContextWithActionFolder(String.Empty);
        	
        }
        
        public WorkFlowScript(ISTRunTimeContext ctx)
            : base(VuserClass.CommandLineArguments, ctx, "test")
            
        {
        	this._context = ctx;
        	UpdateContextWithActionFolder(String.Empty);
        	UpdateTestSettings(ctx);
        }
        
        internal void InitializeComponent()
        {
        	LoadInput();
        	
        	InitReport();
        	
        	InitializeEncryptionManagerValues();
        
        	_userCode = new TestUserCode();
            _flow = _userCode;
            _flow.Context=this._context;
            
            
        
        	_flow.DataFetchActivity13 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity13");
            _flow.DataFetchActivity10 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity10");
            _flow.StartActivity1 = new HP.ST.Ext.BasicActivities.StartActivity(_context,"StartActivity1");
            _flow.Loop2 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop2Input>(_context,"Loop2",LoopType.ForEach);
            _flow.DataExporterActivity12 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity12");
            _flow.DataExporterActivity15 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity15");
            _flow.DataExporterCloseActivity16 = new HP.ST.Ext.BasicActivities.DataExporterCloseActivity(_context,"DataExporterCloseActivity16");
            _flow.EndActivity3 = new HP.ST.Ext.BasicActivities.EndActivity(_context,"EndActivity3");
            _flow.DataDisconnectActivity11 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity11");
            _flow.DataDisconnectActivity14 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity14");
            this.DataCursorActivity17 = new HP.ST.Ext.BasicActivities.DataCursorActivity(_context,"DataCursorActivity17");
            this.DataCursorActivity17_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            this.DataCursorActivity18 = new HP.ST.Ext.BasicActivities.DataCursorActivity(_context,"DataCursorActivity18");
            this.DataCursorActivity18_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            _flow.Sequence9 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence9");
            _flow.HTTPActivity6 = new HP.ST.Ext.HTTPActivity.HTTPActivity(_context,"HTTPActivity6");
            _flow.SetEnvironmentVariableActivity7 = new HP.ST.Ext.BasicActivities.SetEnvironmentVariableActivity(_context,"SetEnvironmentVariableActivity7");
            _flow.ConcatenateStringsActivity8 = new HP.ST.Ext.BasicActivities.ConcatenateStringsActivity(_context,"ConcatenateStringsActivity8");
            _flow.HTTPActivity4 = new HP.ST.Ext.HTTPActivity.HTTPActivity(_context,"HTTPActivity4");
            _flow.DataFetchActivity13.Comment = @"";
            _flow.DataFetchActivity13.IconPath = @"";
            _flow.DataFetchActivity13.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity13.QueryClassName = @"HP.ST.Ext.CustomDataProviders.ExcelFileDataQuery";
            XmlDocument DataFetchActivity13_QueryParameters_Document = new XmlDocument();
            DataFetchActivity13_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity13Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>7f748606-fe53-4f5e-9298-48b9cd7ac254</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>excelForward!Emprestimo</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value>excelForward</Value></QueryParameter><QueryParameter><Name>FilePath</Name><Value>" + _context.ResourceManager.GetValue("{excelForward!Emprestimo.TablePath}") + "</Value></QueryParameter><QueryParameter><Name>SheetName</Name><Value>Emprestimo$</Value></QueryParameter><QueryParameter><Name>ContainsHeadersRow</Name><Value>True</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity13_QueryParameters_Document.LoadXml(xmlDataFetchActivity13Params);
            _flow.DataFetchActivity13.QueryParameters = DataFetchActivity13_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("excelForward!Emprestimo", _flow.DataFetchActivity13);
            this.Activities.Add (_flow.DataFetchActivity13);
            _flow.DataFetchActivity10.Comment = @"";
            _flow.DataFetchActivity10.IconPath = @"";
            _flow.DataFetchActivity10.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity10.QueryClassName = @"HP.ST.Ext.CustomDataProviders.LocalDataQuery";
            XmlDocument DataFetchActivity10_QueryParameters_Document = new XmlDocument();
            DataFetchActivity10_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity10Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>3365de2f-540b-4850-b570-63691a2d7a3c</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>Teste</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value></Value></QueryParameter><QueryParameter><Name>TableStructure</Name><Value>Column1,String,|Column2,String,|Column3,String,|Column4,String,</Value></QueryParameter><QueryParameter><Name>TableContents</Name><Value>Fernanda|Zimmer|zimmer12|1234^Luciana|Alves|alves12|1234^Lucas |Silva|silva12|1234</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity10_QueryParameters_Document.LoadXml(xmlDataFetchActivity10Params);
            _flow.DataFetchActivity10.QueryParameters = DataFetchActivity10_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("Teste", _flow.DataFetchActivity10);
            this.Activities.Add (_flow.DataFetchActivity10);
            _flow.StartActivity1.Comment = @"";
            _flow.StartActivity1.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.StartActivity1.Name = @"Start";
            _flow.StartActivity1.JVM = new HP.ST.Ext.BasicActivities.JVMProperties();
            _flow.StartActivity1.IsJavaUsed = false;
            _flow.StartActivity1.JVM.Classpath = @"%CLASSPATH%";
            _flow.StartActivity1.JVM.AdditionalVMParameters = @"";
            _flow.StartActivity1.JMS = new HP.ST.Ext.BasicActivities.JMSProperties();
            _flow.StartActivity1.IsJmsUsed = false;
            _flow.StartActivity1.JMS.JNDIContextFactory = @"<Select...>";
            _flow.StartActivity1.JMS.JNDIProviderUrl = @"";
            _flow.StartActivity1.JMS.JMSConnectionFactory = @"";
            _flow.StartActivity1.JMS.SecurityPrincipal = @"";
            _flow.StartActivity1.JMS.SecurityCredentials = @"";
            _flow.StartActivity1.JMS.JMSClientID = @"";
            _flow.StartActivity1.JMS.SSLPassword = @"";
            _flow.StartActivity1.JMS.SSLTrustedCertificate = @"";
            _flow.StartActivity1.JMS.SSLIdentity = @"";
            _flow.StartActivity1.JMS.ConnectionsPerProcess = @"1";
            _flow.StartActivity1.JMS.TimeoutOptions = @"DN_User_defined_Timeout";
            _flow.StartActivity1.JMS.UserTimeout = @"20";
            _flow.StartActivity1.JMS.GenerateAutoSelector = @"No";
            _flow.StartActivity1.KafkaSSL = new HP.ST.Fwk.KafkaFWK.KafkaSSLProperties();
            _flow.StartActivity1.IsKafkaUsed = false;
            _flow.StartActivity1.KafkaSSL.StrEnableSSL = @"No";
            _flow.StartActivity1.KafkaSSL.SSLCALocation = @"";
            _flow.StartActivity1.KafkaSSL.SSLClientCertificateLocation = @"";
            _flow.StartActivity1.KafkaSSL.SSLClientKeyLocation = @"";
            _flow.StartActivity1.KafkaSASL = new HP.ST.Fwk.KafkaFWK.KafkaSASLProperties();
            _flow.StartActivity1.KafkaSASL.StrEnableSASL = @"No";
            _flow.StartActivity1.KafkaSASL.StrMechanism = @"GSSAPI";
            _flow.StartActivity1.KafkaSASL.StrServiceName = @"";
            this.Activities.Add (_flow.StartActivity1);
            _flow.Loop2.ConditionAsString = @"For each item in {DataSource.excelForward!Emprestimo}";
            _flow.Loop2.NumberOfIterations = (int)1;
            _flow.Loop2.Condition += delegate(object sender,STActivityBaseEventArgs e)
            {
            return !DataCursorActivity18.IsAtEndPosition;
            };
            _flow.Loop2.Comment = @"";
            _flow.Loop2.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop2.Name = @"Test Flow";
            _flow.Loop2.Activities.Add (this.DataCursorActivity17);
            _flow.Loop2.Activities.Add (this.DataCursorActivity18);
            _flow.Loop2.Activities.Add (_flow.Sequence9);
            this.Activities.Add (_flow.Loop2);
            _flow.DataExporterActivity12.Comment = @"";
            _flow.DataExporterActivity12.IconPath = @"";
            VTDPropertyInfoBase pi299 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter150 = new VTDObjectGetter(pi299);
            VTDPropertyInfoBase pi300 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter150 = new VTDObjectSetter(pi300);
            binding_setter150 = new StringFormaterDecorator(binding_setter150,"{Step.DataFetchActivity10.OutTable}");
            bind_dir150 = new BindDirection(_flow.DataFetchActivity10,binding_getter150,binding_setter150,BindTargetType.ToInProperty);
            _flow.DataExporterActivity12.InDirections.Add(bind_dir150);
            this.Activities.Add (_flow.DataExporterActivity12);
            _flow.DataExporterActivity15.Comment = @"";
            _flow.DataExporterActivity15.IconPath = @"";
            VTDPropertyInfoBase pi301 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter151 = new VTDObjectGetter(pi301);
            VTDPropertyInfoBase pi302 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter151 = new VTDObjectSetter(pi302);
            binding_setter151 = new StringFormaterDecorator(binding_setter151,"{Step.DataFetchActivity13.OutTable}");
            bind_dir151 = new BindDirection(_flow.DataFetchActivity13,binding_getter151,binding_setter151,BindTargetType.ToInProperty);
            _flow.DataExporterActivity15.InDirections.Add(bind_dir151);
            this.Activities.Add (_flow.DataExporterActivity15);
            _flow.DataExporterCloseActivity16.Comment = @"";
            _flow.DataExporterCloseActivity16.IconPath = @"";
            this.Activities.Add (_flow.DataExporterCloseActivity16);
            _flow.EndActivity3.Comment = @"";
            _flow.EndActivity3.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.EndActivity3.Name = @"End";
            this.Activities.Add (_flow.EndActivity3);
            _flow.DataDisconnectActivity11.Comment = @"";
            _flow.DataDisconnectActivity11.IconPath = @"";
            VTDPropertyInfoBase pi303 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter152 = new VTDObjectGetter(pi303);
            VTDPropertyInfoBase pi304 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter152 = new VTDObjectSetter(pi304);
            binding_setter152 = new StringFormaterDecorator(binding_setter152,"{Step.DataFetchActivity10.OutTable}");
            bind_dir152 = new BindDirection(_flow.DataFetchActivity10,binding_getter152,binding_setter152,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity11.InDirections.Add(bind_dir152);
            this.Activities.Add (_flow.DataDisconnectActivity11);
            _flow.DataDisconnectActivity14.Comment = @"";
            _flow.DataDisconnectActivity14.IconPath = @"";
            VTDPropertyInfoBase pi305 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter153 = new VTDObjectGetter(pi305);
            VTDPropertyInfoBase pi306 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter153 = new VTDObjectSetter(pi306);
            binding_setter153 = new StringFormaterDecorator(binding_setter153,"{Step.DataFetchActivity13.OutTable}");
            bind_dir153 = new BindDirection(_flow.DataFetchActivity13,binding_getter153,binding_setter153,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity14.InDirections.Add(bind_dir153);
            this.Activities.Add (_flow.DataDisconnectActivity14);
            this.DataCursorActivity17.Comment = @"";
            this.DataCursorActivity17.IconPath = @"";
            VTDPropertyInfoBase pi307 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter154 = new VTDObjectGetter(pi307);
            VTDPropertyInfoBase pi308 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter154 = new VTDObjectSetter(pi308);
            binding_setter154 = new StringFormaterDecorator(binding_setter154,"{Step.DataFetchActivity10.OutTable}");
            bind_dir154 = new BindDirection(_flow.DataFetchActivity10,binding_getter154,binding_setter154,BindTargetType.ToInProperty);
            this.DataCursorActivity17.InDirections.Add(bind_dir154);
            this.DataCursorActivity17_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.DataCursorActivity17_Policy.StartAtSpecificRow = 1;
            this.DataCursorActivity17_Policy.StartCondition.ColumnName = "";
            this.DataCursorActivity17_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity17_Policy.StartCondition.Value = "";
            this.DataCursorActivity17_Policy.EndPosition = CursorEndPosition.LastRecord;
            this.DataCursorActivity17_Policy.EndAtSpecificRow = 1;
            this.DataCursorActivity17_Policy.EndCondition.ColumnName = "";
            this.DataCursorActivity17_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity17_Policy.EndCondition.Value = "";
            this.DataCursorActivity17_Policy.StepType = CursorStepType.Forward;
            this.DataCursorActivity17_Policy.StepSize = 1;
            this.DataCursorActivity17_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.DataCursorActivity17.Policy = this.DataCursorActivity17_Policy;
            this.DataCursorActivity17.ReportStepData = true;
            _flow.Loop2.BeforeExecuteStepEvent += this.DataCursorActivity17.ResetCursor;
            this.DataCursorActivity18.Comment = @"";
            this.DataCursorActivity18.IconPath = @"";
            VTDPropertyInfoBase pi309 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter155 = new VTDObjectGetter(pi309);
            VTDPropertyInfoBase pi310 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter155 = new VTDObjectSetter(pi310);
            binding_setter155 = new StringFormaterDecorator(binding_setter155,"{Step.DataFetchActivity13.OutTable}");
            bind_dir155 = new BindDirection(_flow.DataFetchActivity13,binding_getter155,binding_setter155,BindTargetType.ToInProperty);
            this.DataCursorActivity18.InDirections.Add(bind_dir155);
            this.DataCursorActivity18_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.DataCursorActivity18_Policy.StartAtSpecificRow = 1;
            this.DataCursorActivity18_Policy.StartCondition.ColumnName = "";
            this.DataCursorActivity18_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity18_Policy.StartCondition.Value = "";
            this.DataCursorActivity18_Policy.EndPosition = CursorEndPosition.LastRecord;
            this.DataCursorActivity18_Policy.EndAtSpecificRow = 1;
            this.DataCursorActivity18_Policy.EndCondition.ColumnName = "";
            this.DataCursorActivity18_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity18_Policy.EndCondition.Value = "";
            this.DataCursorActivity18_Policy.StepType = CursorStepType.Forward;
            this.DataCursorActivity18_Policy.StepSize = 1;
            this.DataCursorActivity18_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.DataCursorActivity18.Policy = this.DataCursorActivity18_Policy;
            this.DataCursorActivity18.ReportStepData = true;
            _flow.Loop2.BeforeExecuteStepEvent += this.DataCursorActivity18.ResetCursor;
            _flow.Sequence9.Comment = @"";
            _flow.Sequence9.IconPath = @"";
            _flow.Sequence9.Name = @"Sequence9";
            _flow.Sequence9.Activities.Add (_flow.HTTPActivity6);
            _flow.Sequence9.Activities.Add (_flow.SetEnvironmentVariableActivity7);
            _flow.Sequence9.Activities.Add (_flow.ConcatenateStringsActivity8);
            _flow.Sequence9.Activities.Add (_flow.HTTPActivity4);
            _flow.HTTPActivity6.TextBody = @"";
            _flow.HTTPActivity6.TextXmlBody = @"";
            _flow.HTTPActivity6.FileBody = @"";
            _flow.HTTPActivity6.PostBody = @"";
            _flow.HTTPActivity6.Url = @"http://localhost:3434/cars-app/api/login";
            _flow.HTTPActivity6.HttpMethod = @"POST";
            _flow.HTTPActivity6.HttpVersion = @"1.1";
            _flow.HTTPActivity6.RequestHeaders = new Pair<string, string>[1];
            _flow.HTTPActivity6.RequestHeaders[0] = new Pair<string, string>();
            _flow.HTTPActivity6.RequestHeaders[0].Key = @"Content-Type";
            _flow.HTTPActivity6.RequestHeaders[0].Value = @"application/json";
            _flow.HTTPActivity6.Comment = @"";
            _flow.HTTPActivity6.IconPath = @"AddIns\ServiceTest\HTTPActivity\toolbox_http.png";
            _flow.HTTPActivity6.RequestBodyType = @"Json";
            _flow.HTTPActivity6.ResponseType = @"Json";
            _flow.HTTPActivity6.Name = @"HTTP Request6";
            _flow.HTTPActivity6.Proxy.Server = @"";
            _flow.HTTPActivity6.Proxy.Username = @"";
            _flow.HTTPActivity6.Proxy.Password = @"";
            _flow.HTTPActivity6.Authentication.Username = @"";
            _flow.HTTPActivity6.Authentication.Password = @"";
            _flow.HTTPActivity6.Authentication.PreemptiveAuthentication = false;
            _flow.HTTPActivity6.ConnectionType = @"Keep-Alive";
            _flow.HTTPActivity6.Timeout = (int)100000;
            _flow.HTTPActivity6.ClientCertificate.Password = @"";
            _flow.HTTPActivity6.ClientCertificate.FileSystem.Path = @"";
            _flow.HTTPActivity6.UseClientCertificate = false;
            _flow.HTTPActivity6.MaximumAutomaticRedirections = (int)3;
            _flow.HTTPActivity6.AllowRedirections = true;
            _flow.HTTPActivity6.ReuseCookies = false;
            _flow.HTTPActivity6.ExpectServerError = false;
            _flow.HTTPActivity6.HanaRequest = false;
            XmlDocument HTTPActivity6_XMLBody_Document = new XmlDocument();
            HTTPActivity6_XMLBody_Document.PreserveWhitespace = true;
            HTTPActivity6_XMLBody_Document.LoadXml(
@"<Object jsonType=""Object"" isAnonymous=""true""><username jsonType=""String"">{DataSource.excelForward!Emprestimo.USERNAME}</username><password jsonType=""String"">{DataSource.excelForward!Emprestimo.PASSWORD}</password></Object>");
            _flow.HTTPActivity6.XMLBody = HTTPActivity6_XMLBody_Document;
            XmlDocument HTTPActivity6_RequestMultipartInfoXml_Document = new XmlDocument();
            HTTPActivity6_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            HTTPActivity6_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.HTTPActivity6.RequestMultipartInfoXml = HTTPActivity6_RequestMultipartInfoXml_Document;
            _flow.HTTPActivity6.Multipart=false;
            VTDPropertyInfoBase pi311 = new VTDPropertyInfoBase("USERNAME");
            VTDBaseGetter binding_getter156 = new VTDObjectGetter(pi311);
            VTDPropertyInfoBase pi312 = new VTDPropertyInfoBase("XMLBody","/*[local-name(.)='Object'][1]/*[local-name(.)='username'][1]");
            VTDBaseSetter binding_setter156 = new VTDJsonSetter(pi312,XmlTypeCode.String);
            binding_setter156 = new StringFormaterDecorator(binding_setter156,"{DataSource.excelForward!Emprestimo.USERNAME}");
            bind_dir156 = new BindDirection(this.DataCursorActivity18,binding_getter156,binding_setter156,BindTargetType.ToInProperty);
            _flow.HTTPActivity6.InDirections.Add(bind_dir156);
            VTDPropertyInfoBase pi313 = new VTDPropertyInfoBase("PASSWORD");
            VTDBaseGetter binding_getter157 = new VTDObjectGetter(pi313);
            VTDPropertyInfoBase pi314 = new VTDPropertyInfoBase("XMLBody","/*[local-name(.)='Object'][1]/*[local-name(.)='password'][1]");
            VTDBaseSetter binding_setter157 = new VTDJsonSetter(pi314,XmlTypeCode.String);
            binding_setter157 = new StringFormaterDecorator(binding_setter157,"{DataSource.excelForward!Emprestimo.PASSWORD}");
            bind_dir157 = new BindDirection(this.DataCursorActivity18,binding_getter157,binding_setter157,BindTargetType.ToInProperty);
            _flow.HTTPActivity6.InDirections.Add(bind_dir157);
            XmlDocument HTTPActivity6_ExpectedResponseXmlBody_Document = new XmlDocument();
            HTTPActivity6_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            HTTPActivity6_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity6.ExpectedResponseXmlBody = HTTPActivity6_ExpectedResponseXmlBody_Document;
            XmlDocument HTTPActivity6_ExpectedResponseJsonBody_Document = new XmlDocument();
            HTTPActivity6_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            HTTPActivity6_ExpectedResponseJsonBody_Document.LoadXml(
@"<Object jsonType=""Object"" isAnonymous=""true""><firstname jsonType=""String"">{DataSource.Teste.Column1}</firstname><lastname jsonType=""String"">{DataSource.Teste.Column2}</lastname><username jsonType=""String"">{DataSource.Teste.Column3}</username><token_type jsonType=""String"">Bearer</token_type><access_token jsonType=""String"">eyJhbGciOiJIUzI1NiJ9.eyJwcmluY2lwYWwiOiJINHNJQUFBQUFBQUFBSlZTUFVcL2JRQmgrblFZRmhGUStwRmJxUUJmb2hoeXBqSmtBcFpVcUN4QWhDNVZhWGV3WGMzQytNXC9jUmtxWEtWQVlHVUNrU0VuK0JmOUl1XC9BRFVEbDJadVwvWTlFM0RhQmZVbSs3M0h6OWZycTFzWU14cVdVczI0TUdFdVhNcGxhSExOWldvd2RwcmJmdWdNNmdSdGdYaGJBTnMwZ2JzVFZDQ0lvTUlUQzdQUkh1dXl1bUF5cmE5MzlqQzJqWjZHMTBxblE4WWR6VEk4VkhvXC9mT0NPbGNhXC9CRXJxNExRQ3RXMllZWEdzbkxSclNqWjdPZGVZYk1OME9ZdFV2TzlIejJLNlFXazVFMllVV2tQSk9nS1RDQ2Faczd1S1ZEa2FDMU4zWnAzbG90NUMyNGhnUEdmR2tMdFwva3JTc3QrN3Z2VTFKQ1E3Z0UxUjdlVUNIdW52bG9hSG5DVmVWRUpTYUsya1cyakpUQ2RcL2hYcHo0QjNOZnJrOHVCKzBLQUhXeStQZzM1ZnpGQ2d5K2ZmajlzaWc2aUMwOEg3RmV3aHE5bk56TWxNeGJHcjN5emNYRzJmbnQwZnNucE93UmJcLzVcL0h3dkx3K2I2cXlyTG1XWldqZXlJYUErclwvcG5JVng0bnY5OUNQMnp4TEJkSWY1UzBtRHhJbE1RVXQ2cVZ1T1wvYndzVG1ldFQ4Mkc0MU5cLzFiVFRnbXVtaEk5bW1SMnE4cmpCUXQ2XC9qWDZmZVQrUjlFOFE3R3VrdzRwTktuUzlDYXl6cW9QMStkejAxK1wvWGxjUkJqK3p1TlwvQUxXN3o2a1NBd0FBIiwic3ViIjoibHVhbHZlcyIsInJvbGVzIjpbIlJPTEVfVVNFUiJdLCJleHAiOjE3MDI2NzM0NzcsImlhdCI6MTcwMjY2OTg3N30.em5L4nU8Hr096IAX6H0blTKO81onDNi4oOfvm69GxRk</access_token><roles jsonType=""Array""><Value jsonType=""String"" isAnonymous=""true"">ROLE_USER</Value></roles></Object>");
            _flow.HTTPActivity6.ExpectedResponseJsonBody = HTTPActivity6_ExpectedResponseJsonBody_Document;
            XmlDocument HTTPActivity6_ExpectedOutputProperties_Document = new XmlDocument();
            HTTPActivity6_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            HTTPActivity6_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion /><StatusCode>200</StatusCode><StatusDescription /><ResponseBody /><ResponseBodyAsBase64 /></Arguments>");
            _flow.HTTPActivity6.ExpectedOutputProperties = HTTPActivity6_ExpectedOutputProperties_Document;
            VTDPropertyInfoBase pi315 = new VTDPropertyInfoBase("Column1");
            VTDBaseGetter binding_getter158 = new VTDObjectGetter(pi315);
            VTDPropertyInfoBase pi316 = new VTDPropertyInfoBase("XMLResponse","/*[local-name(.)='Object'][1]/*[local-name(.)='firstname'][1]");
            VTDBaseSetter binding_setter158 = new VTDCheckpointSetter(XmlTypeCode.String);
            binding_setter158 = new StringFormaterDecorator(binding_setter158,"{DataSource.Teste.Column1}");
            bind_dir158 = new BindDirection(this.DataCursorActivity17,binding_getter158,binding_setter158,BindTargetType.ToInProperty);
            VTDPropertyInfoBase pi317 = new VTDPropertyInfoBase("Column2");
            VTDBaseGetter binding_getter159 = new VTDObjectGetter(pi317);
            VTDPropertyInfoBase pi318 = new VTDPropertyInfoBase("XMLResponse","/*[local-name(.)='Object'][1]/*[local-name(.)='lastname'][1]");
            VTDBaseSetter binding_setter159 = new VTDCheckpointSetter(XmlTypeCode.String);
            binding_setter159 = new StringFormaterDecorator(binding_setter159,"{DataSource.Teste.Column2}");
            bind_dir159 = new BindDirection(this.DataCursorActivity17,binding_getter159,binding_setter159,BindTargetType.ToInProperty);
            VTDPropertyInfoBase pi319 = new VTDPropertyInfoBase("Column3");
            VTDBaseGetter binding_getter160 = new VTDObjectGetter(pi319);
            VTDPropertyInfoBase pi320 = new VTDPropertyInfoBase("XMLResponse","/*[local-name(.)='Object'][1]/*[local-name(.)='username'][1]");
            VTDBaseSetter binding_setter160 = new VTDCheckpointSetter(XmlTypeCode.String);
            binding_setter160 = new StringFormaterDecorator(binding_setter160,"{DataSource.Teste.Column3}");
            bind_dir160 = new BindDirection(this.DataCursorActivity17,binding_getter160,binding_setter160,BindTargetType.ToInProperty);
            set_HTTPActivity6_checkpoints(_flow.HTTPActivity6);
            _flow.SetEnvironmentVariableActivity7.VariableKey = @"Token";
            _flow.SetEnvironmentVariableActivity7.VariableValue = @"{Step.ResponseJsonBody.HTTPActivity6.access_token}";
            _flow.SetEnvironmentVariableActivity7.Comment = @"";
            _flow.SetEnvironmentVariableActivity7.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_setenv.png";
            _flow.SetEnvironmentVariableActivity7.Name = @"Set OS Environment Variable7";
            VTDPropertyInfoBase pi321 = new VTDPropertyInfoBase("XMLResponse","/*[local-name(.)='Object'][1]/*[local-name(.)='access_token'][1]");
            VTDBaseGetter binding_getter161 = new VTDJsonGetter(pi321);
            VTDPropertyInfoBase pi322 = new VTDPropertyInfoBase("VariableValue");
            VTDBaseSetter binding_setter161 = new VTDObjectSetter(pi322);
            binding_setter161 = new StringFormaterDecorator(binding_setter161,"{Step.ResponseJsonBody.HTTPActivity6.access_token}");
            bind_dir161 = new BindDirection(_flow.HTTPActivity6,binding_getter161,binding_setter161,BindTargetType.ToInProperty);
            _flow.SetEnvironmentVariableActivity7.InDirections.Add(bind_dir161);
            _flow.ConcatenateStringsActivity8.Prefix = @" Bearer ";
            _flow.ConcatenateStringsActivity8.Suffix = @"{Step.InputProperties.SetEnvironmentVariableActivity7.VariableValue}";
            _flow.ConcatenateStringsActivity8.Comment = @"";
            _flow.ConcatenateStringsActivity8.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_concat.png";
            _flow.ConcatenateStringsActivity8.Name = @"Concatenate Strings8";
            VTDPropertyInfoBase pi323 = new VTDPropertyInfoBase("VariableValue");
            VTDBaseGetter binding_getter162 = new VTDObjectGetter(pi323);
            VTDPropertyInfoBase pi324 = new VTDPropertyInfoBase("Suffix");
            VTDBaseSetter binding_setter162 = new VTDObjectSetter(pi324);
            binding_setter162 = new StringFormaterDecorator(binding_setter162,"{Step.InputProperties.SetEnvironmentVariableActivity7.VariableValue}");
            bind_dir162 = new BindDirection(_flow.SetEnvironmentVariableActivity7,binding_getter162,binding_setter162,BindTargetType.ToInProperty);
            _flow.ConcatenateStringsActivity8.InDirections.Add(bind_dir162);
            _flow.HTTPActivity4.TextBody = @"";
            _flow.HTTPActivity4.TextXmlBody = @"";
            _flow.HTTPActivity4.FileBody = @"";
            _flow.HTTPActivity4.PostBody = @"";
            _flow.HTTPActivity4.Url = @"http://localhost:3434/cars-app/api/loanApp";
            _flow.HTTPActivity4.HttpMethod = @"POST";
            _flow.HTTPActivity4.HttpVersion = @"1.1";
            _flow.HTTPActivity4.RequestHeaders = new Pair<string, string>[2];
            _flow.HTTPActivity4.RequestHeaders[0] = new Pair<string, string>();
            _flow.HTTPActivity4.RequestHeaders[0].Key = @"Content-Type";
            _flow.HTTPActivity4.RequestHeaders[0].Value = @"application/json";
            _flow.HTTPActivity4.RequestHeaders[1] = new Pair<string, string>();
            _flow.HTTPActivity4.RequestHeaders[1].Key = @"Authorization";
            _flow.HTTPActivity4.RequestHeaders[1].Value = @"{Step.OutputProperties.ConcatenateStringsActivity8.Result}";
            _flow.HTTPActivity4.Comment = @"";
            _flow.HTTPActivity4.IconPath = @"AddIns\ServiceTest\HTTPActivity\toolbox_http.png";
            _flow.HTTPActivity4.RequestBodyType = @"Json";
            _flow.HTTPActivity4.ResponseType = @"Text";
            _flow.HTTPActivity4.Name = @"HTTP Request4";
            _flow.HTTPActivity4.Proxy.Server = @"";
            _flow.HTTPActivity4.Proxy.Username = @"";
            _flow.HTTPActivity4.Proxy.Password = @"";
            _flow.HTTPActivity4.Authentication.Username = @"";
            _flow.HTTPActivity4.Authentication.Password = @"";
            _flow.HTTPActivity4.Authentication.PreemptiveAuthentication = false;
            _flow.HTTPActivity4.ConnectionType = @"Keep-Alive";
            _flow.HTTPActivity4.Timeout = (int)100000;
            _flow.HTTPActivity4.ClientCertificate.Password = @"";
            _flow.HTTPActivity4.ClientCertificate.FileSystem.Path = @"";
            _flow.HTTPActivity4.UseClientCertificate = false;
            _flow.HTTPActivity4.MaximumAutomaticRedirections = (int)3;
            _flow.HTTPActivity4.AllowRedirections = true;
            _flow.HTTPActivity4.ReuseCookies = false;
            _flow.HTTPActivity4.ExpectServerError = false;
            _flow.HTTPActivity4.HanaRequest = false;
            XmlDocument HTTPActivity4_XMLBody_Document = new XmlDocument();
            HTTPActivity4_XMLBody_Document.PreserveWhitespace = true;
            HTTPActivity4_XMLBody_Document.LoadXml(
@"<Object jsonType=""Object"" isAnonymous=""true""><firstName jsonType=""String"">{DataSource.excelForward!Emprestimo.FIRSTNAME}</firstName><lastName jsonType=""String"">{DataSource.excelForward!Emprestimo.LASTNAME}</lastName><address1 jsonType=""String"">{DataSource.excelForward!Emprestimo.ADDRESS1}</address1><city jsonType=""String"">{DataSource.excelForward!Emprestimo.CITY}</city><state jsonType=""String"">{DataSource.excelForward!Emprestimo.STATE}</state><zip jsonType=""String"">{DataSource.excelForward!Emprestimo.ZIP}</zip><country jsonType=""String"">{DataSource.excelForward!Emprestimo.COUNTRY}</country><dob jsonType=""Date"">{DataSource.excelForward!Emprestimo.DOB}</dob><ssn jsonType=""String"">{DataSource.excelForward!Emprestimo.SSN}</ssn><employer jsonType=""String"">{DataSource.excelForward!Emprestimo.EMPLOYER}</employer><phoneNumber jsonType=""String"">{DataSource.excelForward!Emprestimo.PHONENUMBER}</phoneNumber><durationOfJob jsonType=""String"">{DataSource.excelForward!Emprestimo.DURATIONOFJOB}</durationOfJob><income jsonType=""Integer"">{DataSource.excelForward!Emprestimo.INCOME}</income><loanTerm jsonType=""Integer"">{DataSource.excelForward!Emprestimo.LOANTERM}</loanTerm><loanAmount jsonType=""Integer"">{DataSource.excelForward!Emprestimo.LOANAMOUNT}</loanAmount><validateAddress jsonType=""Boolean"">{DataSource.excelForward!Emprestimo.VALIDATEADDRESS}</validateAddress></Object>");
            _flow.HTTPActivity4.XMLBody = HTTPActivity4_XMLBody_Document;
            XmlDocument HTTPActivity4_RequestMultipartInfoXml_Document = new XmlDocument();
            HTTPActivity4_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            HTTPActivity4_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.HTTPActivity4.RequestMultipartInfoXml = HTTPActivity4_RequestMultipartInfoXml_Document;
            _flow.HTTPActivity4.Multipart=false;
            VTDPropertyInfoBase pi325 = new VTDPropertyInfoBase("ZIP");
            VTDBaseGetter binding_getter163 = new VTDObjectGetter(pi325);
            VTDPropertyInfoBase pi326 = new VTDPropertyInfoBase("XMLBody","/*[local-name(.)='Object'][1]/*[local-name(.)='zip'][1]");
            VTDBaseSetter binding_setter163 = new VTDJsonSetter(pi326,XmlTypeCode.String);
            binding_setter163 = new StringFormaterDecorator(binding_setter163,"{DataSource.excelForward!Emprestimo.ZIP}");
            bind_dir163 = new BindDirection(this.DataCursorActivity18,binding_getter163,binding_setter163,BindTargetType.ToInProperty);
            _flow.HTTPActivity4.InDirections.Add(bind_dir163);
            VTDPropertyInfoBase pi327 = new VTDPropertyInfoBase("VALIDATEADDRESS");
            VTDBaseGetter binding_getter164 = new VTDObjectGetter(pi327);
            VTDPropertyInfoBase pi328 = new VTDPropertyInfoBase("XMLBody","/*[local-name(.)='Object'][1]/*[local-name(.)='validateAddress'][1]");
            VTDBaseSetter binding_setter164 = new VTDJsonSetter(pi328,XmlTypeCode.Boolean);
            bind_dir164 = new BindDirection(this.DataCursorActivity18,binding_getter164,binding_setter164,BindTargetType.ToInProperty);
            _flow.HTTPActivity4.InDirections.Add(bind_dir164);
            VTDPropertyInfoBase pi329 = new VTDPropertyInfoBase("STATE");
            VTDBaseGetter binding_getter165 = new VTDObjectGetter(pi329);
            VTDPropertyInfoBase pi330 = new VTDPropertyInfoBase("XMLBody","/*[local-name(.)='Object'][1]/*[local-name(.)='state'][1]");
            VTDBaseSetter binding_setter165 = new VTDJsonSetter(pi330,XmlTypeCode.String);
            binding_setter165 = new StringFormaterDecorator(binding_setter165,"{DataSource.excelForward!Emprestimo.STATE}");
            bind_dir165 = new BindDirection(this.DataCursorActivity18,binding_getter165,binding_setter165,BindTargetType.ToInProperty);
            _flow.HTTPActivity4.InDirections.Add(bind_dir165);
            VTDPropertyInfoBase pi331 = new VTDPropertyInfoBase("SSN");
            VTDBaseGetter binding_getter166 = new VTDObjectGetter(pi331);
            VTDPropertyInfoBase pi332 = new VTDPropertyInfoBase("XMLBody","/*[local-name(.)='Object'][1]/*[local-name(.)='ssn'][1]");
            VTDBaseSetter binding_setter166 = new VTDJsonSetter(pi332,XmlTypeCode.String);
            binding_setter166 = new StringFormaterDecorator(binding_setter166,"{DataSource.excelForward!Emprestimo.SSN}");
            bind_dir166 = new BindDirection(this.DataCursorActivity18,binding_getter166,binding_setter166,BindTargetType.ToInProperty);
            _flow.HTTPActivity4.InDirections.Add(bind_dir166);
            VTDPropertyInfoBase pi333 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter167 = new VTDObjectGetter(pi333);
            VTDPropertyInfoBase pi334 = new VTDPropertyInfoBase("RequestHeaders[1].Value");
            VTDBaseSetter binding_setter167 = new VTDObjectSetter(pi334);
            binding_setter167 = new StringFormaterDecorator(binding_setter167,"{Step.OutputProperties.ConcatenateStringsActivity8.Result}");
            bind_dir167 = new BindDirection(_flow.ConcatenateStringsActivity8,binding_getter167,binding_setter167,BindTargetType.ToInProperty);
            _flow.HTTPActivity4.InDirections.Add(bind_dir167);
            VTDPropertyInfoBase pi335 = new VTDPropertyInfoBase("PHONENUMBER");
            VTDBaseGetter binding_getter168 = new VTDObjectGetter(pi335);
            VTDPropertyInfoBase pi336 = new VTDPropertyInfoBase("XMLBody","/*[local-name(.)='Object'][1]/*[local-name(.)='phoneNumber'][1]");
            VTDBaseSetter binding_setter168 = new VTDJsonSetter(pi336,XmlTypeCode.String);
            binding_setter168 = new StringFormaterDecorator(binding_setter168,"{DataSource.excelForward!Emprestimo.PHONENUMBER}");
            bind_dir168 = new BindDirection(this.DataCursorActivity18,binding_getter168,binding_setter168,BindTargetType.ToInProperty);
            _flow.HTTPActivity4.InDirections.Add(bind_dir168);
            VTDPropertyInfoBase pi337 = new VTDPropertyInfoBase("LOANTERM");
            VTDBaseGetter binding_getter169 = new VTDObjectGetter(pi337);
            VTDPropertyInfoBase pi338 = new VTDPropertyInfoBase("XMLBody","/*[local-name(.)='Object'][1]/*[local-name(.)='loanTerm'][1]");
            VTDBaseSetter binding_setter169 = new VTDJsonSetter(pi338,XmlTypeCode.UnsignedByte);
            bind_dir169 = new BindDirection(this.DataCursorActivity18,binding_getter169,binding_setter169,BindTargetType.ToInProperty);
            _flow.HTTPActivity4.InDirections.Add(bind_dir169);
            VTDPropertyInfoBase pi339 = new VTDPropertyInfoBase("LOANAMOUNT");
            VTDBaseGetter binding_getter170 = new VTDObjectGetter(pi339);
            VTDPropertyInfoBase pi340 = new VTDPropertyInfoBase("XMLBody","/*[local-name(.)='Object'][1]/*[local-name(.)='loanAmount'][1]");
            VTDBaseSetter binding_setter170 = new VTDJsonSetter(pi340,XmlTypeCode.UnsignedShort);
            bind_dir170 = new BindDirection(this.DataCursorActivity18,binding_getter170,binding_setter170,BindTargetType.ToInProperty);
            _flow.HTTPActivity4.InDirections.Add(bind_dir170);
            VTDPropertyInfoBase pi341 = new VTDPropertyInfoBase("LASTNAME");
            VTDBaseGetter binding_getter171 = new VTDObjectGetter(pi341);
            VTDPropertyInfoBase pi342 = new VTDPropertyInfoBase("XMLBody","/*[local-name(.)='Object'][1]/*[local-name(.)='lastName'][1]");
            VTDBaseSetter binding_setter171 = new VTDJsonSetter(pi342,XmlTypeCode.String);
            binding_setter171 = new StringFormaterDecorator(binding_setter171,"{DataSource.excelForward!Emprestimo.LASTNAME}");
            bind_dir171 = new BindDirection(this.DataCursorActivity18,binding_getter171,binding_setter171,BindTargetType.ToInProperty);
            _flow.HTTPActivity4.InDirections.Add(bind_dir171);
            VTDPropertyInfoBase pi343 = new VTDPropertyInfoBase("INCOME");
            VTDBaseGetter binding_getter172 = new VTDObjectGetter(pi343);
            VTDPropertyInfoBase pi344 = new VTDPropertyInfoBase("XMLBody","/*[local-name(.)='Object'][1]/*[local-name(.)='income'][1]");
            VTDBaseSetter binding_setter172 = new VTDJsonSetter(pi344,XmlTypeCode.UnsignedInt);
            bind_dir172 = new BindDirection(this.DataCursorActivity18,binding_getter172,binding_setter172,BindTargetType.ToInProperty);
            _flow.HTTPActivity4.InDirections.Add(bind_dir172);
            VTDPropertyInfoBase pi345 = new VTDPropertyInfoBase("FIRSTNAME");
            VTDBaseGetter binding_getter173 = new VTDObjectGetter(pi345);
            VTDPropertyInfoBase pi346 = new VTDPropertyInfoBase("XMLBody","/*[local-name(.)='Object'][1]/*[local-name(.)='firstName'][1]");
            VTDBaseSetter binding_setter173 = new VTDJsonSetter(pi346,XmlTypeCode.String);
            binding_setter173 = new StringFormaterDecorator(binding_setter173,"{DataSource.excelForward!Emprestimo.FIRSTNAME}");
            bind_dir173 = new BindDirection(this.DataCursorActivity18,binding_getter173,binding_setter173,BindTargetType.ToInProperty);
            _flow.HTTPActivity4.InDirections.Add(bind_dir173);
            VTDPropertyInfoBase pi347 = new VTDPropertyInfoBase("EMPLOYER");
            VTDBaseGetter binding_getter174 = new VTDObjectGetter(pi347);
            VTDPropertyInfoBase pi348 = new VTDPropertyInfoBase("XMLBody","/*[local-name(.)='Object'][1]/*[local-name(.)='employer'][1]");
            VTDBaseSetter binding_setter174 = new VTDJsonSetter(pi348,XmlTypeCode.String);
            binding_setter174 = new StringFormaterDecorator(binding_setter174,"{DataSource.excelForward!Emprestimo.EMPLOYER}");
            bind_dir174 = new BindDirection(this.DataCursorActivity18,binding_getter174,binding_setter174,BindTargetType.ToInProperty);
            _flow.HTTPActivity4.InDirections.Add(bind_dir174);
            VTDPropertyInfoBase pi349 = new VTDPropertyInfoBase("DURATIONOFJOB");
            VTDBaseGetter binding_getter175 = new VTDObjectGetter(pi349);
            VTDPropertyInfoBase pi350 = new VTDPropertyInfoBase("XMLBody","/*[local-name(.)='Object'][1]/*[local-name(.)='durationOfJob'][1]");
            VTDBaseSetter binding_setter175 = new VTDJsonSetter(pi350,XmlTypeCode.String);
            binding_setter175 = new StringFormaterDecorator(binding_setter175,"{DataSource.excelForward!Emprestimo.DURATIONOFJOB}");
            bind_dir175 = new BindDirection(this.DataCursorActivity18,binding_getter175,binding_setter175,BindTargetType.ToInProperty);
            _flow.HTTPActivity4.InDirections.Add(bind_dir175);
            VTDPropertyInfoBase pi351 = new VTDPropertyInfoBase("DOB");
            VTDBaseGetter binding_getter176 = new VTDObjectGetter(pi351);
            VTDPropertyInfoBase pi352 = new VTDPropertyInfoBase("XMLBody","/*[local-name(.)='Object'][1]/*[local-name(.)='dob'][1]");
            VTDBaseSetter binding_setter176 = new VTDJsonSetter(pi352,XmlTypeCode.String);
            binding_setter176 = new StringFormaterDecorator(binding_setter176,"{DataSource.excelForward!Emprestimo.DOB}");
            bind_dir176 = new BindDirection(this.DataCursorActivity18,binding_getter176,binding_setter176,BindTargetType.ToInProperty);
            _flow.HTTPActivity4.InDirections.Add(bind_dir176);
            VTDPropertyInfoBase pi353 = new VTDPropertyInfoBase("COUNTRY");
            VTDBaseGetter binding_getter177 = new VTDObjectGetter(pi353);
            VTDPropertyInfoBase pi354 = new VTDPropertyInfoBase("XMLBody","/*[local-name(.)='Object'][1]/*[local-name(.)='country'][1]");
            VTDBaseSetter binding_setter177 = new VTDJsonSetter(pi354,XmlTypeCode.String);
            binding_setter177 = new StringFormaterDecorator(binding_setter177,"{DataSource.excelForward!Emprestimo.COUNTRY}");
            bind_dir177 = new BindDirection(this.DataCursorActivity18,binding_getter177,binding_setter177,BindTargetType.ToInProperty);
            _flow.HTTPActivity4.InDirections.Add(bind_dir177);
            VTDPropertyInfoBase pi355 = new VTDPropertyInfoBase("CITY");
            VTDBaseGetter binding_getter178 = new VTDObjectGetter(pi355);
            VTDPropertyInfoBase pi356 = new VTDPropertyInfoBase("XMLBody","/*[local-name(.)='Object'][1]/*[local-name(.)='city'][1]");
            VTDBaseSetter binding_setter178 = new VTDJsonSetter(pi356,XmlTypeCode.String);
            binding_setter178 = new StringFormaterDecorator(binding_setter178,"{DataSource.excelForward!Emprestimo.CITY}");
            bind_dir178 = new BindDirection(this.DataCursorActivity18,binding_getter178,binding_setter178,BindTargetType.ToInProperty);
            _flow.HTTPActivity4.InDirections.Add(bind_dir178);
            VTDPropertyInfoBase pi357 = new VTDPropertyInfoBase("ADDRESS1");
            VTDBaseGetter binding_getter179 = new VTDObjectGetter(pi357);
            VTDPropertyInfoBase pi358 = new VTDPropertyInfoBase("XMLBody","/*[local-name(.)='Object'][1]/*[local-name(.)='address1'][1]");
            VTDBaseSetter binding_setter179 = new VTDJsonSetter(pi358,XmlTypeCode.String);
            binding_setter179 = new StringFormaterDecorator(binding_setter179,"{DataSource.excelForward!Emprestimo.ADDRESS1}");
            bind_dir179 = new BindDirection(this.DataCursorActivity18,binding_getter179,binding_setter179,BindTargetType.ToInProperty);
            _flow.HTTPActivity4.InDirections.Add(bind_dir179);
            XmlDocument HTTPActivity4_ExpectedResponseXmlBody_Document = new XmlDocument();
            HTTPActivity4_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            HTTPActivity4_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity4.ExpectedResponseXmlBody = HTTPActivity4_ExpectedResponseXmlBody_Document;
            XmlDocument HTTPActivity4_ExpectedResponseJsonBody_Document = new XmlDocument();
            HTTPActivity4_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            HTTPActivity4_ExpectedResponseJsonBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity4.ExpectedResponseJsonBody = HTTPActivity4_ExpectedResponseJsonBody_Document;
            XmlDocument HTTPActivity4_ExpectedOutputProperties_Document = new XmlDocument();
            HTTPActivity4_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            HTTPActivity4_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion /><StatusCode>200</StatusCode><StatusDescription /><ResponseBody /><ResponseBodyAsBase64 /></Arguments>");
            _flow.HTTPActivity4.ExpectedOutputProperties = HTTPActivity4_ExpectedOutputProperties_Document;
            set_HTTPActivity4_checkpoints(_flow.HTTPActivity4);
            
        }
        
        internal void InitializeEncryptionManagerValues()
        {
        
        }
        	
    	bool useReport = true;
    
    	protected override STExecutionResult ExecuteStep()
        {
            return base.ExecuteStep();
        }
    
        public void Start()
        {
    	    try
    		{
    		  Workflow_Executing();
    		  this.ExecuteStep();
    		}
    		finally
    		{
    		  WorkFlowScript_Completed();
    		}
        }
    
    	private void InitReport()
    	{
    		if (useReport)
    		{	
    			// Intialize Reporter
    			string reportDBDir = Path.Combine(this._context.ReportDirectory, @"Report");
    			CleanupReport(reportDBDir);        	
    			string reportDBPath = Path.Combine(reportDBDir, "VTDReport.mdb");        	
    			if (reporter == null)
    			{
    				reporter = new Reporter(reportDBPath);
    			}
    			_context.Reporter = reporter;
    		}
    	}
    
        public static void CopyDirectory(string Src, string Dst)
        {
            String[] Files;
    
            if (Dst[Dst.Length - 1] != Path.DirectorySeparatorChar)
                Dst += Path.DirectorySeparatorChar;
            if (!Directory.Exists(Dst)) Directory.CreateDirectory(Dst);
            Files = Directory.GetFileSystemEntries(Src);
            foreach (string Element in Files)
            {
                // Sub directories
                if (Directory.Exists(Element))
                    CopyDirectory(Element, Dst + Path.GetFileName(Element));
                // Files in directory
                else
                    File.Copy(Element, Dst + Path.GetFileName(Element), true);
            }
        }
        
        private void CleanupReport(string reportDBDir)
        {   
    		if (useReport)
    		{             
    			string reportTemplateDir = Path.Combine(ServiceTestRunner.GetInstallPath(), "bin", "ReportResources");
    			try
    			{
            		CopyDirectory(reportTemplateDir, reportDBDir);
    			}
    			catch //(Exception ex)
    			{
    				//ToDo: LoggingService.Warn("Report Cleanup Error", ex);
    			}
    		}
        }
    
        void Workflow_Executing()
        {   
        	InitReportNode();
                       
        }
    
    	private void InitReportNode()
    	{
    		if (useReport)
    		{	
        		// Init report creator
    			this.reportCreator = new HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator();
    			this.reportLevelInTree = reportCreator.Init(_context.EnvironmentProfile.GetVariableValue("TestName"), _context);
                
    			STActivityBase activity = this;
    			string workflowID = activity.GetHashCode().ToString();
    			ReportNodeCreationData newNodeData =
    			new ReportNodeCreationData(workflowID, workflowID, DateTime.Now);
    			reporter.CreateReportNode(newNodeData);
            
    			ReportInfoData newReportData = new ReportInfoData(workflowID, ReportKeywords.TypeKeywordTag, this.GetType().ToString());
    			reporter.SendReportData(newReportData);
    			newReportData = new ReportInfoData(workflowID, ReportKeywords.NameKeywordTag, this.Name);
    			//TrackData(ReportInfoData.InfoDataTag, newReportData);
    			reporter.SendReportData(newReportData);            
            }
    	}
        
        void WorkFlowScript_Completed()
        {   
    		
    
    		CreateReportFiles();
    					
        	// Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
    
    		OnExecutionCompleted();
    		
        }
    
    	private void CreateReportFiles()
    	{
    		if (useReport)
    		{	
    			//Dispose reporter inorder to close connection to report DB
           		this._context.Reporter.Dispose();
            	
           		// Run report creator
    			reportCreator.RunOnDBAndCreateFiles();
    		}
    	}
    
        
        void Workflow_Faulting()
        {
    		
    
    		CreateReportFiles();
            // Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
           
    		OnExecutionCompleted();
        }
    
    	protected override QcSystemVariables GetRuntimeQcVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeQcVariables(this._context);
    	}
            
    	protected override TestSystemVariables GetTestSystemVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeTestVariables(this._context);
    	}
    
    	private void UpdateTestSettings(ISTRunTimeContext ctx)
        {
    		ctx.PropertyBag["StopTestOnStepFailure"] = true;
    	}
    }
    
    public partial class VuserClass
    {
    	public static string[] CommandLineArguments;
    	public static string[] DotNetResolverPaths;
    	
        public VuserClass()
        {
    				
    		AssemblyResolver.AddSTPathsToResolutionPaths();
    		AssemblyResolver.AttachToAppdomain();
        }
    
        private void AddAssemblyResolver()
        {
    		AssemblyResolver.AddTestPathToResolutionPaths(GetTestPath());
    		AssemblyResolver.AddPathsForAssemblyResolution(DotNetResolverPaths);
        }
    	
        public int STAction()
        {	
            AddAssemblyResolver();
            STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
            WorkFlowScript script = new WorkFlowScript(ctx);
            script.InitializeComponent();
            script.Start();       
            
            return 0;
        }
        
        public void NotifyLicenseException(string msg)
        {
        		
    		try
    		{
    		    STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
                WorkFlowScript script = new WorkFlowScript(ctx);
                script.InitializeComponent();
                script.Context.ReplayClient.OnLicenseFailure(msg);
                
            }
            catch (Exception)
            {
    			// ToDo: log the error message
            }        
        }
    
    	 protected string GetTestPath()
            {
                if (CommandLineArguments != null)
                {
                    for (int i = 0; i < CommandLineArguments.Length; i++)
                    {
                        if (CommandLineArguments[i].Equals("-test", StringComparison.OrdinalIgnoreCase))
                        {
                            return CommandLineArguments[i + 1];
                        }
                    }
                }
                return String.Empty;
            }
        
    }
    
    }
    