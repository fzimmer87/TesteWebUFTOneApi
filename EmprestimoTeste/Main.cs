/***************************************************************
    *  DO NOT EDIT THIS FILE!
    *         
    *  This file is automatically generated by HP Service Test.
    *  Manually changing the contents of this file may result in 
    *  loss of information.
    *          
    *  To edit the test, open the file ‘EmprestimoTeste.st’ 
    *  in HP Service Test.
     ***************************************************************/
    
    namespace Script
    {
    using System;
    using System.Text;
    using System.Threading;
    using System.Xml;
    using System.Xml.Schema;
    using HP.ST.Fwk.ReporterFWK;
    using HP.ST.Shared.Utilities;
    using HP.ST.Ext.BindingImpl.Getters;
    using HP.ST.Ext.BindingImpl.Setters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.PropInfo;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Getters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Setters;
    using HP.ST.Fwk.RunTimeFWK;
    using HP.ST.Fwk.RunTimeFWK.Utilities;
    using HP.ST.Fwk.RunTimeFWK.HelperClasses;
    using HP.ST.Fwk.RunTimeFWK.CompositeActivities;
    using HP.ST.Ext.BindingImpl.Setters.DataSourceSetters;
    using HP.ST.Fwk.JVMLoader;
    using System.IO;
    using System.Collections.Generic;
    using System.Reflection;
    using HP.ST.Fwk.SOAReplayAPI;
    using HP.ST.Fwk.UFTLicensing;
    
    
    
    public partial class WorkFlowScript : STWorkFlowScriptBase
    {    
    	TestUserCode _userCode = null;
    	TestEntities _flow = null;
    	static Reporter reporter;
    	int reportLevelInTree;
        HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator reportCreator;
    	
    	public BindDirection bind_dir97 = null;
        public BindDirection bind_dir98 = null;
        public BindDirection bind_dir99 = null;
        public BindDirection bind_dir100 = null;
        public HP.ST.Ext.BasicActivities.DataCursorActivity DataCursorActivity17 = null;
        public BindDirection bind_dir101 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy DataCursorActivity17_Policy = null;
        public BindDirection bind_dir102 = null;
        public BindDirection bind_dir103 = null;
        public BindDirection bind_dir104 = null;
        public BindDirection bind_dir105 = null;
        public BindDirection bind_dir106 = null;
        public BindDirection bind_dir107 = null;
        public BindDirection bind_dir108 = null;
        public BindDirection bind_dir109 = null;
        public BindDirection bind_dir110 = null;
        public BindDirection bind_dir111 = null;
        public BindDirection bind_dir112 = null;
        public BindDirection bind_dir113 = null;
        public BindDirection bind_dir114 = null;
        public BindDirection bind_dir115 = null;
        public BindDirection bind_dir116 = null;
        public BindDirection bind_dir117 = null;
        public BindDirection bind_dir118 = null;
        public BindDirection bind_dir119 = null;
        public BindDirection bind_dir120 = null;
        public BindDirection bind_dir121 = null;
        public BindDirection bind_dir122 = null;
        public BindDirection bind_dir123 = null;
        public BindDirection bind_dir124 = null;
        public BindDirection bind_dir125 = null;
        
        public IEnumerable<FeaturesGroup> LicensedFeatures
        {
        
        get
        {
        List<FeaturesGroup> features = new List<FeaturesGroup>();
        return features;
        
        }
        
        }
        
        public WorkFlowScript()
            : base(VuserClass.CommandLineArguments, new STRunTimeContext(), "test")
        {	
        	UpdateContextWithActionFolder(String.Empty);
        	
        }
        
        public WorkFlowScript(ISTRunTimeContext ctx)
            : base(VuserClass.CommandLineArguments, ctx, "test")
            
        {
        	this._context = ctx;
        	UpdateContextWithActionFolder(String.Empty);
        	UpdateTestSettings(ctx);
        }
        
        internal void InitializeComponent()
        {
        	LoadInput();
        	
        	InitReport();
        	
        	InitializeEncryptionManagerValues();
        
        	_userCode = new TestUserCode();
            _flow = _userCode;
            _flow.Context=this._context;
            
            
        
        	_flow.DataFetchActivity13 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity13");
            _flow.DataFetchActivity10 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity10");
            _flow.StartActivity1 = new HP.ST.Ext.BasicActivities.StartActivity(_context,"StartActivity1");
            _flow.Loop2 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop2Input>(_context,"Loop2",LoopType.ForEach);
            _flow.DataExporterActivity12 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity12");
            _flow.DataExporterActivity15 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity15");
            _flow.DataExporterCloseActivity16 = new HP.ST.Ext.BasicActivities.DataExporterCloseActivity(_context,"DataExporterCloseActivity16");
            _flow.EndActivity3 = new HP.ST.Ext.BasicActivities.EndActivity(_context,"EndActivity3");
            _flow.DataDisconnectActivity11 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity11");
            _flow.DataDisconnectActivity14 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity14");
            this.DataCursorActivity17 = new HP.ST.Ext.BasicActivities.DataCursorActivity(_context,"DataCursorActivity17");
            this.DataCursorActivity17_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            _flow.Sequence9 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence9");
            _flow.HTTPActivity6 = new HP.ST.Ext.HTTPActivity.HTTPActivity(_context,"HTTPActivity6");
            _flow.SetEnvironmentVariableActivity7 = new HP.ST.Ext.BasicActivities.SetEnvironmentVariableActivity(_context,"SetEnvironmentVariableActivity7");
            _flow.ConcatenateStringsActivity8 = new HP.ST.Ext.BasicActivities.ConcatenateStringsActivity(_context,"ConcatenateStringsActivity8");
            _flow.HTTPActivity4 = new HP.ST.Ext.HTTPActivity.HTTPActivity(_context,"HTTPActivity4");
            _flow.DataFetchActivity13.Comment = @"";
            _flow.DataFetchActivity13.IconPath = @"";
            _flow.DataFetchActivity13.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity13.QueryClassName = @"HP.ST.Ext.CustomDataProviders.ExcelFileDataQuery";
            XmlDocument DataFetchActivity13_QueryParameters_Document = new XmlDocument();
            DataFetchActivity13_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity13Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>7f748606-fe53-4f5e-9298-48b9cd7ac254</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>excelForward!Emprestimo</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value>excelForward</Value></QueryParameter><QueryParameter><Name>FilePath</Name><Value>" + _context.ResourceManager.GetValue("{excelForward!Emprestimo.TablePath}") + "</Value></QueryParameter><QueryParameter><Name>SheetName</Name><Value>Emprestimo$</Value></QueryParameter><QueryParameter><Name>ContainsHeadersRow</Name><Value>True</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity13_QueryParameters_Document.LoadXml(xmlDataFetchActivity13Params);
            _flow.DataFetchActivity13.QueryParameters = DataFetchActivity13_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("excelForward!Emprestimo", _flow.DataFetchActivity13);
            this.Activities.Add (_flow.DataFetchActivity13);
            _flow.DataFetchActivity10.Comment = @"";
            _flow.DataFetchActivity10.IconPath = @"";
            _flow.DataFetchActivity10.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity10.QueryClassName = @"HP.ST.Ext.CustomDataProviders.LocalDataQuery";
            XmlDocument DataFetchActivity10_QueryParameters_Document = new XmlDocument();
            DataFetchActivity10_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity10Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>3365de2f-540b-4850-b570-63691a2d7a3c</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>Teste</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value></Value></QueryParameter><QueryParameter><Name>TableStructure</Name><Value>Column1,String,|Column2,String,|Column3,String,|Column4,String,</Value></QueryParameter><QueryParameter><Name>TableContents</Name><Value>Fernanda|Zimmer|zimmer12|1234^Luciana|Alves|alves12|1234^Lucas |Silva|silva12|1234</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity10_QueryParameters_Document.LoadXml(xmlDataFetchActivity10Params);
            _flow.DataFetchActivity10.QueryParameters = DataFetchActivity10_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("Teste", _flow.DataFetchActivity10);
            this.Activities.Add (_flow.DataFetchActivity10);
            _flow.StartActivity1.Comment = @"";
            _flow.StartActivity1.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.StartActivity1.Name = @"Start";
            _flow.StartActivity1.JVM = new HP.ST.Ext.BasicActivities.JVMProperties();
            _flow.StartActivity1.IsJavaUsed = false;
            _flow.StartActivity1.JVM.Classpath = @"%CLASSPATH%";
            _flow.StartActivity1.JVM.AdditionalVMParameters = @"";
            _flow.StartActivity1.JMS = new HP.ST.Ext.BasicActivities.JMSProperties();
            _flow.StartActivity1.IsJmsUsed = false;
            _flow.StartActivity1.JMS.JNDIContextFactory = @"<Select...>";
            _flow.StartActivity1.JMS.JNDIProviderUrl = @"";
            _flow.StartActivity1.JMS.JMSConnectionFactory = @"";
            _flow.StartActivity1.JMS.SecurityPrincipal = @"";
            _flow.StartActivity1.JMS.SecurityCredentials = @"";
            _flow.StartActivity1.JMS.JMSClientID = @"";
            _flow.StartActivity1.JMS.SSLPassword = @"";
            _flow.StartActivity1.JMS.SSLTrustedCertificate = @"";
            _flow.StartActivity1.JMS.SSLIdentity = @"";
            _flow.StartActivity1.JMS.ConnectionsPerProcess = @"1";
            _flow.StartActivity1.JMS.TimeoutOptions = @"DN_User_defined_Timeout";
            _flow.StartActivity1.JMS.UserTimeout = @"20";
            _flow.StartActivity1.JMS.GenerateAutoSelector = @"No";
            _flow.StartActivity1.KafkaSSL = new HP.ST.Fwk.KafkaFWK.KafkaSSLProperties();
            _flow.StartActivity1.IsKafkaUsed = false;
            _flow.StartActivity1.KafkaSSL.StrEnableSSL = @"No";
            _flow.StartActivity1.KafkaSSL.SSLCALocation = @"";
            _flow.StartActivity1.KafkaSSL.SSLClientCertificateLocation = @"";
            _flow.StartActivity1.KafkaSSL.SSLClientKeyLocation = @"";
            _flow.StartActivity1.KafkaSASL = new HP.ST.Fwk.KafkaFWK.KafkaSASLProperties();
            _flow.StartActivity1.KafkaSASL.StrEnableSASL = @"No";
            _flow.StartActivity1.KafkaSASL.StrMechanism = @"GSSAPI";
            _flow.StartActivity1.KafkaSASL.StrServiceName = @"";
            this.Activities.Add (_flow.StartActivity1);
            _flow.Loop2.ConditionAsString = @"For each item in {DataSource.excelForward!Emprestimo}";
            _flow.Loop2.NumberOfIterations = (int)1;
            _flow.Loop2.Condition += delegate(object sender,STActivityBaseEventArgs e)
            {
            return !DataCursorActivity17.IsAtEndPosition;
            };
            _flow.Loop2.Comment = @"";
            _flow.Loop2.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop2.Name = @"Test Flow";
            _flow.Loop2.Activities.Add (this.DataCursorActivity17);
            _flow.Loop2.Activities.Add (_flow.Sequence9);
            this.Activities.Add (_flow.Loop2);
            _flow.DataExporterActivity12.Comment = @"";
            _flow.DataExporterActivity12.IconPath = @"";
            VTDPropertyInfoBase pi193 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter97 = new VTDObjectGetter(pi193);
            VTDPropertyInfoBase pi194 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter97 = new VTDObjectSetter(pi194);
            binding_setter97 = new StringFormaterDecorator(binding_setter97,"{Step.DataFetchActivity10.OutTable}");
            bind_dir97 = new BindDirection(_flow.DataFetchActivity10,binding_getter97,binding_setter97,BindTargetType.ToInProperty);
            _flow.DataExporterActivity12.InDirections.Add(bind_dir97);
            this.Activities.Add (_flow.DataExporterActivity12);
            _flow.DataExporterActivity15.Comment = @"";
            _flow.DataExporterActivity15.IconPath = @"";
            VTDPropertyInfoBase pi195 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter98 = new VTDObjectGetter(pi195);
            VTDPropertyInfoBase pi196 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter98 = new VTDObjectSetter(pi196);
            binding_setter98 = new StringFormaterDecorator(binding_setter98,"{Step.DataFetchActivity13.OutTable}");
            bind_dir98 = new BindDirection(_flow.DataFetchActivity13,binding_getter98,binding_setter98,BindTargetType.ToInProperty);
            _flow.DataExporterActivity15.InDirections.Add(bind_dir98);
            this.Activities.Add (_flow.DataExporterActivity15);
            _flow.DataExporterCloseActivity16.Comment = @"";
            _flow.DataExporterCloseActivity16.IconPath = @"";
            this.Activities.Add (_flow.DataExporterCloseActivity16);
            _flow.EndActivity3.Comment = @"";
            _flow.EndActivity3.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.EndActivity3.Name = @"End";
            this.Activities.Add (_flow.EndActivity3);
            _flow.DataDisconnectActivity11.Comment = @"";
            _flow.DataDisconnectActivity11.IconPath = @"";
            VTDPropertyInfoBase pi197 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter99 = new VTDObjectGetter(pi197);
            VTDPropertyInfoBase pi198 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter99 = new VTDObjectSetter(pi198);
            binding_setter99 = new StringFormaterDecorator(binding_setter99,"{Step.DataFetchActivity10.OutTable}");
            bind_dir99 = new BindDirection(_flow.DataFetchActivity10,binding_getter99,binding_setter99,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity11.InDirections.Add(bind_dir99);
            this.Activities.Add (_flow.DataDisconnectActivity11);
            _flow.DataDisconnectActivity14.Comment = @"";
            _flow.DataDisconnectActivity14.IconPath = @"";
            VTDPropertyInfoBase pi199 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter100 = new VTDObjectGetter(pi199);
            VTDPropertyInfoBase pi200 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter100 = new VTDObjectSetter(pi200);
            binding_setter100 = new StringFormaterDecorator(binding_setter100,"{Step.DataFetchActivity13.OutTable}");
            bind_dir100 = new BindDirection(_flow.DataFetchActivity13,binding_getter100,binding_setter100,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity14.InDirections.Add(bind_dir100);
            this.Activities.Add (_flow.DataDisconnectActivity14);
            this.DataCursorActivity17.Comment = @"";
            this.DataCursorActivity17.IconPath = @"";
            VTDPropertyInfoBase pi201 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter101 = new VTDObjectGetter(pi201);
            VTDPropertyInfoBase pi202 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter101 = new VTDObjectSetter(pi202);
            binding_setter101 = new StringFormaterDecorator(binding_setter101,"{Step.DataFetchActivity13.OutTable}");
            bind_dir101 = new BindDirection(_flow.DataFetchActivity13,binding_getter101,binding_setter101,BindTargetType.ToInProperty);
            this.DataCursorActivity17.InDirections.Add(bind_dir101);
            this.DataCursorActivity17_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.DataCursorActivity17_Policy.StartAtSpecificRow = 1;
            this.DataCursorActivity17_Policy.StartCondition.ColumnName = "";
            this.DataCursorActivity17_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity17_Policy.StartCondition.Value = "";
            this.DataCursorActivity17_Policy.EndPosition = CursorEndPosition.LastRecord;
            this.DataCursorActivity17_Policy.EndAtSpecificRow = 1;
            this.DataCursorActivity17_Policy.EndCondition.ColumnName = "";
            this.DataCursorActivity17_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity17_Policy.EndCondition.Value = "";
            this.DataCursorActivity17_Policy.StepType = CursorStepType.Forward;
            this.DataCursorActivity17_Policy.StepSize = 1;
            this.DataCursorActivity17_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.DataCursorActivity17.Policy = this.DataCursorActivity17_Policy;
            this.DataCursorActivity17.ReportStepData = true;
            _flow.Loop2.BeforeExecuteStepEvent += this.DataCursorActivity17.ResetCursor;
            _flow.Sequence9.Comment = @"";
            _flow.Sequence9.IconPath = @"";
            _flow.Sequence9.Name = @"Sequence9";
            _flow.Sequence9.Activities.Add (_flow.HTTPActivity6);
            _flow.Sequence9.Activities.Add (_flow.SetEnvironmentVariableActivity7);
            _flow.Sequence9.Activities.Add (_flow.ConcatenateStringsActivity8);
            _flow.Sequence9.Activities.Add (_flow.HTTPActivity4);
            _flow.HTTPActivity6.TextBody = @"";
            _flow.HTTPActivity6.TextXmlBody = @"";
            _flow.HTTPActivity6.FileBody = @"";
            _flow.HTTPActivity6.PostBody = @"";
            _flow.HTTPActivity6.Url = @"http://localhost:3434/cars-app/api/login";
            _flow.HTTPActivity6.HttpMethod = @"POST";
            _flow.HTTPActivity6.HttpVersion = @"1.1";
            _flow.HTTPActivity6.RequestHeaders = new Pair<string, string>[1];
            _flow.HTTPActivity6.RequestHeaders[0] = new Pair<string, string>();
            _flow.HTTPActivity6.RequestHeaders[0].Key = @"Content-Type";
            _flow.HTTPActivity6.RequestHeaders[0].Value = @"application/json";
            _flow.HTTPActivity6.Comment = @"";
            _flow.HTTPActivity6.IconPath = @"AddIns\ServiceTest\HTTPActivity\toolbox_http.png";
            _flow.HTTPActivity6.RequestBodyType = @"Json";
            _flow.HTTPActivity6.ResponseType = @"Json";
            _flow.HTTPActivity6.Name = @"HTTP Request6";
            _flow.HTTPActivity6.Proxy.Server = @"";
            _flow.HTTPActivity6.Proxy.Username = @"";
            _flow.HTTPActivity6.Proxy.Password = @"";
            _flow.HTTPActivity6.Authentication.Username = @"";
            _flow.HTTPActivity6.Authentication.Password = @"";
            _flow.HTTPActivity6.Authentication.PreemptiveAuthentication = false;
            _flow.HTTPActivity6.ConnectionType = @"Keep-Alive";
            _flow.HTTPActivity6.Timeout = (int)100000;
            _flow.HTTPActivity6.ClientCertificate.Password = @"";
            _flow.HTTPActivity6.ClientCertificate.FileSystem.Path = @"";
            _flow.HTTPActivity6.UseClientCertificate = false;
            _flow.HTTPActivity6.MaximumAutomaticRedirections = (int)3;
            _flow.HTTPActivity6.AllowRedirections = true;
            _flow.HTTPActivity6.ReuseCookies = false;
            _flow.HTTPActivity6.ExpectServerError = false;
            _flow.HTTPActivity6.HanaRequest = false;
            XmlDocument HTTPActivity6_XMLBody_Document = new XmlDocument();
            HTTPActivity6_XMLBody_Document.PreserveWhitespace = true;
            HTTPActivity6_XMLBody_Document.LoadXml(
@"<Object jsonType=""Object"" isAnonymous=""true""><username jsonType=""String"">{DataSource.excelForward!Emprestimo.USERNAME}</username><password jsonType=""String"">{DataSource.excelForward!Emprestimo.PASSWORD}</password></Object>");
            _flow.HTTPActivity6.XMLBody = HTTPActivity6_XMLBody_Document;
            XmlDocument HTTPActivity6_RequestMultipartInfoXml_Document = new XmlDocument();
            HTTPActivity6_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            HTTPActivity6_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.HTTPActivity6.RequestMultipartInfoXml = HTTPActivity6_RequestMultipartInfoXml_Document;
            _flow.HTTPActivity6.Multipart=false;
            VTDPropertyInfoBase pi203 = new VTDPropertyInfoBase("USERNAME");
            VTDBaseGetter binding_getter102 = new VTDObjectGetter(pi203);
            VTDPropertyInfoBase pi204 = new VTDPropertyInfoBase("XMLBody","/*[local-name(.)='Object'][1]/*[local-name(.)='username'][1]");
            VTDBaseSetter binding_setter102 = new VTDJsonSetter(pi204,XmlTypeCode.String);
            binding_setter102 = new StringFormaterDecorator(binding_setter102,"{DataSource.excelForward!Emprestimo.USERNAME}");
            bind_dir102 = new BindDirection(this.DataCursorActivity17,binding_getter102,binding_setter102,BindTargetType.ToInProperty);
            _flow.HTTPActivity6.InDirections.Add(bind_dir102);
            VTDPropertyInfoBase pi205 = new VTDPropertyInfoBase("PASSWORD");
            VTDBaseGetter binding_getter103 = new VTDObjectGetter(pi205);
            VTDPropertyInfoBase pi206 = new VTDPropertyInfoBase("XMLBody","/*[local-name(.)='Object'][1]/*[local-name(.)='password'][1]");
            VTDBaseSetter binding_setter103 = new VTDJsonSetter(pi206,XmlTypeCode.String);
            binding_setter103 = new StringFormaterDecorator(binding_setter103,"{DataSource.excelForward!Emprestimo.PASSWORD}");
            bind_dir103 = new BindDirection(this.DataCursorActivity17,binding_getter103,binding_setter103,BindTargetType.ToInProperty);
            _flow.HTTPActivity6.InDirections.Add(bind_dir103);
            XmlDocument HTTPActivity6_ExpectedResponseXmlBody_Document = new XmlDocument();
            HTTPActivity6_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            HTTPActivity6_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity6.ExpectedResponseXmlBody = HTTPActivity6_ExpectedResponseXmlBody_Document;
            XmlDocument HTTPActivity6_ExpectedResponseJsonBody_Document = new XmlDocument();
            HTTPActivity6_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            HTTPActivity6_ExpectedResponseJsonBody_Document.LoadXml(
@"<Object jsonType=""Object"" isAnonymous=""true""><firstname jsonType=""String"">{DataSource.excelForward!Emprestimo.FIRSTNAME}</firstname><lastname jsonType=""String"">{DataSource.excelForward!Emprestimo.LASTNAME}</lastname><username jsonType=""String"">{DataSource.excelForward!Emprestimo.USERNAME}</username><token_type jsonType=""String"">Bearer</token_type><access_token jsonType=""String"">eyJhbGciOiJIUzI1NiJ9.eyJwcmluY2lwYWwiOiJINHNJQUFBQUFBQUFBSlZTUFVcL2JRQmgrblFZRmhGUStwRmJxUUJmb2hoeXBqSmtBcFpVcUN4QWhDNVZhWGV3WGMzQytNXC9jUmtxWEtWQVlHVUNrU0VuK0JmOUl1XC9BRFVEbDJadVwvWTlFM0RhQmZVbSs3M0h6OWZycTFzWU14cVdVczI0TUdFdVhNcGxhSExOWldvd2RwcmJmdWdNNmdSdGdYaGJBTnMwZ2JzVFZDQ0lvTUlUQzdQUkh1dXl1bUF5cmE5MzlqQzJqWjZHMTBxblE4WWR6VEk4VkhvXC9mT0NPbGNhXC9CRXJxNExRQ3RXMllZWEdzbkxSclNqWjdPZGVZYk1OME9ZdFV2TzlIejJLNlFXazVFMllVV2tQSk9nS1RDQ2Faczd1S1ZEa2FDMU4zWnAzbG90NUMyNGhnUEdmR2tMdFwva3JTc3QrN3Z2VTFKQ1E3Z0UxUjdlVUNIdW52bG9hSG5DVmVWRUpTYUsya1cyakpUQ2RcL2hYcHo0QjNOZnJrOHVCKzBLQUhXeStQZzM1ZnpGQ2d5K2ZmajlzaWc2aUMwOEg3RmV3aHE5bk56TWxNeGJHcjN5emNYRzJmbnQwZnNucE93UmJcLzVcL0h3dkx3K2I2cXlyTG1XWldqZXlJYUErclwvcG5JVng0bnY5OUNQMnp4TEJkSWY1UzBtRHhJbE1RVXQ2cVZ1T1wvYndzVG1ldFQ4Mkc0MU5cLzFiVFRnbXVtaEk5bW1SMnE4cmpCUXQ2XC9qWDZmZVQrUjlFOFE3R3VrdzRwTktuUzlDYXl6cW9QMStkejAxK1wvWGxjUkJqK3p1TlwvQUxXN3o2a1NBd0FBIiwic3ViIjoibHVhbHZlcyIsInJvbGVzIjpbIlJPTEVfVVNFUiJdLCJleHAiOjE3MDI2NzM0NzcsImlhdCI6MTcwMjY2OTg3N30.em5L4nU8Hr096IAX6H0blTKO81onDNi4oOfvm69GxRk</access_token><roles jsonType=""Array""><Value jsonType=""String"" isAnonymous=""true"">ROLE_USER</Value></roles></Object>");
            _flow.HTTPActivity6.ExpectedResponseJsonBody = HTTPActivity6_ExpectedResponseJsonBody_Document;
            XmlDocument HTTPActivity6_ExpectedOutputProperties_Document = new XmlDocument();
            HTTPActivity6_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            HTTPActivity6_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion /><StatusCode>200</StatusCode><StatusDescription /><ResponseBody /><ResponseBodyAsBase64 /></Arguments>");
            _flow.HTTPActivity6.ExpectedOutputProperties = HTTPActivity6_ExpectedOutputProperties_Document;
            VTDPropertyInfoBase pi207 = new VTDPropertyInfoBase("FIRSTNAME");
            VTDBaseGetter binding_getter104 = new VTDObjectGetter(pi207);
            VTDPropertyInfoBase pi208 = new VTDPropertyInfoBase("XMLResponse","/*[local-name(.)='Object'][1]/*[local-name(.)='firstname'][1]");
            VTDBaseSetter binding_setter104 = new VTDCheckpointSetter(XmlTypeCode.String);
            binding_setter104 = new StringFormaterDecorator(binding_setter104,"{DataSource.excelForward!Emprestimo.FIRSTNAME}");
            bind_dir104 = new BindDirection(this.DataCursorActivity17,binding_getter104,binding_setter104,BindTargetType.ToInProperty);
            VTDPropertyInfoBase pi209 = new VTDPropertyInfoBase("LASTNAME");
            VTDBaseGetter binding_getter105 = new VTDObjectGetter(pi209);
            VTDPropertyInfoBase pi210 = new VTDPropertyInfoBase("XMLResponse","/*[local-name(.)='Object'][1]/*[local-name(.)='lastname'][1]");
            VTDBaseSetter binding_setter105 = new VTDCheckpointSetter(XmlTypeCode.String);
            binding_setter105 = new StringFormaterDecorator(binding_setter105,"{DataSource.excelForward!Emprestimo.LASTNAME}");
            bind_dir105 = new BindDirection(this.DataCursorActivity17,binding_getter105,binding_setter105,BindTargetType.ToInProperty);
            VTDPropertyInfoBase pi211 = new VTDPropertyInfoBase("USERNAME");
            VTDBaseGetter binding_getter106 = new VTDObjectGetter(pi211);
            VTDPropertyInfoBase pi212 = new VTDPropertyInfoBase("XMLResponse","/*[local-name(.)='Object'][1]/*[local-name(.)='username'][1]");
            VTDBaseSetter binding_setter106 = new VTDCheckpointSetter(XmlTypeCode.String);
            binding_setter106 = new StringFormaterDecorator(binding_setter106,"{DataSource.excelForward!Emprestimo.USERNAME}");
            bind_dir106 = new BindDirection(this.DataCursorActivity17,binding_getter106,binding_setter106,BindTargetType.ToInProperty);
            set_HTTPActivity6_checkpoints(_flow.HTTPActivity6);
            _flow.SetEnvironmentVariableActivity7.VariableKey = @"Token";
            _flow.SetEnvironmentVariableActivity7.VariableValue = @"{Step.ResponseJsonBody.HTTPActivity6.access_token}";
            _flow.SetEnvironmentVariableActivity7.Comment = @"";
            _flow.SetEnvironmentVariableActivity7.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_setenv.png";
            _flow.SetEnvironmentVariableActivity7.Name = @"Set OS Environment Variable7";
            VTDPropertyInfoBase pi213 = new VTDPropertyInfoBase("XMLResponse","/*[local-name(.)='Object'][1]/*[local-name(.)='access_token'][1]");
            VTDBaseGetter binding_getter107 = new VTDJsonGetter(pi213);
            VTDPropertyInfoBase pi214 = new VTDPropertyInfoBase("VariableValue");
            VTDBaseSetter binding_setter107 = new VTDObjectSetter(pi214);
            binding_setter107 = new StringFormaterDecorator(binding_setter107,"{Step.ResponseJsonBody.HTTPActivity6.access_token}");
            bind_dir107 = new BindDirection(_flow.HTTPActivity6,binding_getter107,binding_setter107,BindTargetType.ToInProperty);
            _flow.SetEnvironmentVariableActivity7.InDirections.Add(bind_dir107);
            _flow.ConcatenateStringsActivity8.Prefix = @" Bearer ";
            _flow.ConcatenateStringsActivity8.Suffix = @"{Step.InputProperties.SetEnvironmentVariableActivity7.VariableValue}";
            _flow.ConcatenateStringsActivity8.Comment = @"";
            _flow.ConcatenateStringsActivity8.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_concat.png";
            _flow.ConcatenateStringsActivity8.Name = @"Concatenate Strings8";
            VTDPropertyInfoBase pi215 = new VTDPropertyInfoBase("VariableValue");
            VTDBaseGetter binding_getter108 = new VTDObjectGetter(pi215);
            VTDPropertyInfoBase pi216 = new VTDPropertyInfoBase("Suffix");
            VTDBaseSetter binding_setter108 = new VTDObjectSetter(pi216);
            binding_setter108 = new StringFormaterDecorator(binding_setter108,"{Step.InputProperties.SetEnvironmentVariableActivity7.VariableValue}");
            bind_dir108 = new BindDirection(_flow.SetEnvironmentVariableActivity7,binding_getter108,binding_setter108,BindTargetType.ToInProperty);
            _flow.ConcatenateStringsActivity8.InDirections.Add(bind_dir108);
            _flow.HTTPActivity4.TextBody = @"";
            _flow.HTTPActivity4.TextXmlBody = @"";
            _flow.HTTPActivity4.FileBody = @"";
            _flow.HTTPActivity4.PostBody = @"";
            _flow.HTTPActivity4.Url = @"http://localhost:3434/cars-app/api/loanApp";
            _flow.HTTPActivity4.HttpMethod = @"POST";
            _flow.HTTPActivity4.HttpVersion = @"1.1";
            _flow.HTTPActivity4.RequestHeaders = new Pair<string, string>[2];
            _flow.HTTPActivity4.RequestHeaders[0] = new Pair<string, string>();
            _flow.HTTPActivity4.RequestHeaders[0].Key = @"Content-Type";
            _flow.HTTPActivity4.RequestHeaders[0].Value = @"application/json";
            _flow.HTTPActivity4.RequestHeaders[1] = new Pair<string, string>();
            _flow.HTTPActivity4.RequestHeaders[1].Key = @"Authorization";
            _flow.HTTPActivity4.RequestHeaders[1].Value = @"{Step.OutputProperties.ConcatenateStringsActivity8.Result}";
            _flow.HTTPActivity4.Comment = @"";
            _flow.HTTPActivity4.IconPath = @"AddIns\ServiceTest\HTTPActivity\toolbox_http.png";
            _flow.HTTPActivity4.RequestBodyType = @"Json";
            _flow.HTTPActivity4.ResponseType = @"Text";
            _flow.HTTPActivity4.Name = @"HTTP Request4";
            _flow.HTTPActivity4.Proxy.Server = @"";
            _flow.HTTPActivity4.Proxy.Username = @"";
            _flow.HTTPActivity4.Proxy.Password = @"";
            _flow.HTTPActivity4.Authentication.Username = @"";
            _flow.HTTPActivity4.Authentication.Password = @"";
            _flow.HTTPActivity4.Authentication.PreemptiveAuthentication = false;
            _flow.HTTPActivity4.ConnectionType = @"Keep-Alive";
            _flow.HTTPActivity4.Timeout = (int)100000;
            _flow.HTTPActivity4.ClientCertificate.Password = @"";
            _flow.HTTPActivity4.ClientCertificate.FileSystem.Path = @"";
            _flow.HTTPActivity4.UseClientCertificate = false;
            _flow.HTTPActivity4.MaximumAutomaticRedirections = (int)3;
            _flow.HTTPActivity4.AllowRedirections = true;
            _flow.HTTPActivity4.ReuseCookies = false;
            _flow.HTTPActivity4.ExpectServerError = false;
            _flow.HTTPActivity4.HanaRequest = false;
            XmlDocument HTTPActivity4_XMLBody_Document = new XmlDocument();
            HTTPActivity4_XMLBody_Document.PreserveWhitespace = true;
            HTTPActivity4_XMLBody_Document.LoadXml(
@"<Object jsonType=""Object"" isAnonymous=""true""><firstName jsonType=""String"">{DataSource.excelForward!Emprestimo.FIRSTNAME}</firstName><lastName jsonType=""String"">{DataSource.excelForward!Emprestimo.LASTNAME}</lastName><address1 jsonType=""String"">{DataSource.excelForward!Emprestimo.ADDRESS1}</address1><city jsonType=""String"">{DataSource.excelForward!Emprestimo.CITY}</city><state jsonType=""String"">{DataSource.excelForward!Emprestimo.STATE}</state><zip jsonType=""String"">{DataSource.excelForward!Emprestimo.ZIP}</zip><country jsonType=""String"">{DataSource.excelForward!Emprestimo.COUNTRY}</country><dob jsonType=""Date"">{DataSource.excelForward!Emprestimo.DOB}</dob><ssn jsonType=""String"">{DataSource.excelForward!Emprestimo.SSN}</ssn><employer jsonType=""String"">{DataSource.excelForward!Emprestimo.EMPLOYER}</employer><phoneNumber jsonType=""String"">{DataSource.excelForward!Emprestimo.PHONENUMBER}</phoneNumber><durationOfJob jsonType=""String"">{DataSource.excelForward!Emprestimo.DURATIONOFJOB}</durationOfJob><income jsonType=""Integer"">{DataSource.excelForward!Emprestimo.INCOME}</income><loanTerm jsonType=""Integer"">{DataSource.excelForward!Emprestimo.LOANTERM}</loanTerm><loanAmount jsonType=""Integer"">{DataSource.excelForward!Emprestimo.LOANAMOUNT}</loanAmount><validateAddress jsonType=""Boolean"">{DataSource.excelForward!Emprestimo.VALIDATEADDRESS}</validateAddress></Object>");
            _flow.HTTPActivity4.XMLBody = HTTPActivity4_XMLBody_Document;
            XmlDocument HTTPActivity4_RequestMultipartInfoXml_Document = new XmlDocument();
            HTTPActivity4_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            HTTPActivity4_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.HTTPActivity4.RequestMultipartInfoXml = HTTPActivity4_RequestMultipartInfoXml_Document;
            _flow.HTTPActivity4.Multipart=false;
            VTDPropertyInfoBase pi217 = new VTDPropertyInfoBase("ZIP");
            VTDBaseGetter binding_getter109 = new VTDObjectGetter(pi217);
            VTDPropertyInfoBase pi218 = new VTDPropertyInfoBase("XMLBody","/*[local-name(.)='Object'][1]/*[local-name(.)='zip'][1]");
            VTDBaseSetter binding_setter109 = new VTDJsonSetter(pi218,XmlTypeCode.String);
            binding_setter109 = new StringFormaterDecorator(binding_setter109,"{DataSource.excelForward!Emprestimo.ZIP}");
            bind_dir109 = new BindDirection(this.DataCursorActivity17,binding_getter109,binding_setter109,BindTargetType.ToInProperty);
            _flow.HTTPActivity4.InDirections.Add(bind_dir109);
            VTDPropertyInfoBase pi219 = new VTDPropertyInfoBase("VALIDATEADDRESS");
            VTDBaseGetter binding_getter110 = new VTDObjectGetter(pi219);
            VTDPropertyInfoBase pi220 = new VTDPropertyInfoBase("XMLBody","/*[local-name(.)='Object'][1]/*[local-name(.)='validateAddress'][1]");
            VTDBaseSetter binding_setter110 = new VTDJsonSetter(pi220,XmlTypeCode.Boolean);
            bind_dir110 = new BindDirection(this.DataCursorActivity17,binding_getter110,binding_setter110,BindTargetType.ToInProperty);
            _flow.HTTPActivity4.InDirections.Add(bind_dir110);
            VTDPropertyInfoBase pi221 = new VTDPropertyInfoBase("STATE");
            VTDBaseGetter binding_getter111 = new VTDObjectGetter(pi221);
            VTDPropertyInfoBase pi222 = new VTDPropertyInfoBase("XMLBody","/*[local-name(.)='Object'][1]/*[local-name(.)='state'][1]");
            VTDBaseSetter binding_setter111 = new VTDJsonSetter(pi222,XmlTypeCode.String);
            binding_setter111 = new StringFormaterDecorator(binding_setter111,"{DataSource.excelForward!Emprestimo.STATE}");
            bind_dir111 = new BindDirection(this.DataCursorActivity17,binding_getter111,binding_setter111,BindTargetType.ToInProperty);
            _flow.HTTPActivity4.InDirections.Add(bind_dir111);
            VTDPropertyInfoBase pi223 = new VTDPropertyInfoBase("SSN");
            VTDBaseGetter binding_getter112 = new VTDObjectGetter(pi223);
            VTDPropertyInfoBase pi224 = new VTDPropertyInfoBase("XMLBody","/*[local-name(.)='Object'][1]/*[local-name(.)='ssn'][1]");
            VTDBaseSetter binding_setter112 = new VTDJsonSetter(pi224,XmlTypeCode.String);
            binding_setter112 = new StringFormaterDecorator(binding_setter112,"{DataSource.excelForward!Emprestimo.SSN}");
            bind_dir112 = new BindDirection(this.DataCursorActivity17,binding_getter112,binding_setter112,BindTargetType.ToInProperty);
            _flow.HTTPActivity4.InDirections.Add(bind_dir112);
            VTDPropertyInfoBase pi225 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter113 = new VTDObjectGetter(pi225);
            VTDPropertyInfoBase pi226 = new VTDPropertyInfoBase("RequestHeaders[1].Value");
            VTDBaseSetter binding_setter113 = new VTDObjectSetter(pi226);
            binding_setter113 = new StringFormaterDecorator(binding_setter113,"{Step.OutputProperties.ConcatenateStringsActivity8.Result}");
            bind_dir113 = new BindDirection(_flow.ConcatenateStringsActivity8,binding_getter113,binding_setter113,BindTargetType.ToInProperty);
            _flow.HTTPActivity4.InDirections.Add(bind_dir113);
            VTDPropertyInfoBase pi227 = new VTDPropertyInfoBase("PHONENUMBER");
            VTDBaseGetter binding_getter114 = new VTDObjectGetter(pi227);
            VTDPropertyInfoBase pi228 = new VTDPropertyInfoBase("XMLBody","/*[local-name(.)='Object'][1]/*[local-name(.)='phoneNumber'][1]");
            VTDBaseSetter binding_setter114 = new VTDJsonSetter(pi228,XmlTypeCode.String);
            binding_setter114 = new StringFormaterDecorator(binding_setter114,"{DataSource.excelForward!Emprestimo.PHONENUMBER}");
            bind_dir114 = new BindDirection(this.DataCursorActivity17,binding_getter114,binding_setter114,BindTargetType.ToInProperty);
            _flow.HTTPActivity4.InDirections.Add(bind_dir114);
            VTDPropertyInfoBase pi229 = new VTDPropertyInfoBase("LOANTERM");
            VTDBaseGetter binding_getter115 = new VTDObjectGetter(pi229);
            VTDPropertyInfoBase pi230 = new VTDPropertyInfoBase("XMLBody","/*[local-name(.)='Object'][1]/*[local-name(.)='loanTerm'][1]");
            VTDBaseSetter binding_setter115 = new VTDJsonSetter(pi230,XmlTypeCode.UnsignedByte);
            bind_dir115 = new BindDirection(this.DataCursorActivity17,binding_getter115,binding_setter115,BindTargetType.ToInProperty);
            _flow.HTTPActivity4.InDirections.Add(bind_dir115);
            VTDPropertyInfoBase pi231 = new VTDPropertyInfoBase("LOANAMOUNT");
            VTDBaseGetter binding_getter116 = new VTDObjectGetter(pi231);
            VTDPropertyInfoBase pi232 = new VTDPropertyInfoBase("XMLBody","/*[local-name(.)='Object'][1]/*[local-name(.)='loanAmount'][1]");
            VTDBaseSetter binding_setter116 = new VTDJsonSetter(pi232,XmlTypeCode.UnsignedShort);
            bind_dir116 = new BindDirection(this.DataCursorActivity17,binding_getter116,binding_setter116,BindTargetType.ToInProperty);
            _flow.HTTPActivity4.InDirections.Add(bind_dir116);
            VTDPropertyInfoBase pi233 = new VTDPropertyInfoBase("LASTNAME");
            VTDBaseGetter binding_getter117 = new VTDObjectGetter(pi233);
            VTDPropertyInfoBase pi234 = new VTDPropertyInfoBase("XMLBody","/*[local-name(.)='Object'][1]/*[local-name(.)='lastName'][1]");
            VTDBaseSetter binding_setter117 = new VTDJsonSetter(pi234,XmlTypeCode.String);
            binding_setter117 = new StringFormaterDecorator(binding_setter117,"{DataSource.excelForward!Emprestimo.LASTNAME}");
            bind_dir117 = new BindDirection(this.DataCursorActivity17,binding_getter117,binding_setter117,BindTargetType.ToInProperty);
            _flow.HTTPActivity4.InDirections.Add(bind_dir117);
            VTDPropertyInfoBase pi235 = new VTDPropertyInfoBase("INCOME");
            VTDBaseGetter binding_getter118 = new VTDObjectGetter(pi235);
            VTDPropertyInfoBase pi236 = new VTDPropertyInfoBase("XMLBody","/*[local-name(.)='Object'][1]/*[local-name(.)='income'][1]");
            VTDBaseSetter binding_setter118 = new VTDJsonSetter(pi236,XmlTypeCode.UnsignedInt);
            bind_dir118 = new BindDirection(this.DataCursorActivity17,binding_getter118,binding_setter118,BindTargetType.ToInProperty);
            _flow.HTTPActivity4.InDirections.Add(bind_dir118);
            VTDPropertyInfoBase pi237 = new VTDPropertyInfoBase("FIRSTNAME");
            VTDBaseGetter binding_getter119 = new VTDObjectGetter(pi237);
            VTDPropertyInfoBase pi238 = new VTDPropertyInfoBase("XMLBody","/*[local-name(.)='Object'][1]/*[local-name(.)='firstName'][1]");
            VTDBaseSetter binding_setter119 = new VTDJsonSetter(pi238,XmlTypeCode.String);
            binding_setter119 = new StringFormaterDecorator(binding_setter119,"{DataSource.excelForward!Emprestimo.FIRSTNAME}");
            bind_dir119 = new BindDirection(this.DataCursorActivity17,binding_getter119,binding_setter119,BindTargetType.ToInProperty);
            _flow.HTTPActivity4.InDirections.Add(bind_dir119);
            VTDPropertyInfoBase pi239 = new VTDPropertyInfoBase("EMPLOYER");
            VTDBaseGetter binding_getter120 = new VTDObjectGetter(pi239);
            VTDPropertyInfoBase pi240 = new VTDPropertyInfoBase("XMLBody","/*[local-name(.)='Object'][1]/*[local-name(.)='employer'][1]");
            VTDBaseSetter binding_setter120 = new VTDJsonSetter(pi240,XmlTypeCode.String);
            binding_setter120 = new StringFormaterDecorator(binding_setter120,"{DataSource.excelForward!Emprestimo.EMPLOYER}");
            bind_dir120 = new BindDirection(this.DataCursorActivity17,binding_getter120,binding_setter120,BindTargetType.ToInProperty);
            _flow.HTTPActivity4.InDirections.Add(bind_dir120);
            VTDPropertyInfoBase pi241 = new VTDPropertyInfoBase("DURATIONOFJOB");
            VTDBaseGetter binding_getter121 = new VTDObjectGetter(pi241);
            VTDPropertyInfoBase pi242 = new VTDPropertyInfoBase("XMLBody","/*[local-name(.)='Object'][1]/*[local-name(.)='durationOfJob'][1]");
            VTDBaseSetter binding_setter121 = new VTDJsonSetter(pi242,XmlTypeCode.String);
            binding_setter121 = new StringFormaterDecorator(binding_setter121,"{DataSource.excelForward!Emprestimo.DURATIONOFJOB}");
            bind_dir121 = new BindDirection(this.DataCursorActivity17,binding_getter121,binding_setter121,BindTargetType.ToInProperty);
            _flow.HTTPActivity4.InDirections.Add(bind_dir121);
            VTDPropertyInfoBase pi243 = new VTDPropertyInfoBase("DOB");
            VTDBaseGetter binding_getter122 = new VTDObjectGetter(pi243);
            VTDPropertyInfoBase pi244 = new VTDPropertyInfoBase("XMLBody","/*[local-name(.)='Object'][1]/*[local-name(.)='dob'][1]");
            VTDBaseSetter binding_setter122 = new VTDJsonSetter(pi244,XmlTypeCode.String);
            binding_setter122 = new StringFormaterDecorator(binding_setter122,"{DataSource.excelForward!Emprestimo.DOB}");
            bind_dir122 = new BindDirection(this.DataCursorActivity17,binding_getter122,binding_setter122,BindTargetType.ToInProperty);
            _flow.HTTPActivity4.InDirections.Add(bind_dir122);
            VTDPropertyInfoBase pi245 = new VTDPropertyInfoBase("COUNTRY");
            VTDBaseGetter binding_getter123 = new VTDObjectGetter(pi245);
            VTDPropertyInfoBase pi246 = new VTDPropertyInfoBase("XMLBody","/*[local-name(.)='Object'][1]/*[local-name(.)='country'][1]");
            VTDBaseSetter binding_setter123 = new VTDJsonSetter(pi246,XmlTypeCode.String);
            binding_setter123 = new StringFormaterDecorator(binding_setter123,"{DataSource.excelForward!Emprestimo.COUNTRY}");
            bind_dir123 = new BindDirection(this.DataCursorActivity17,binding_getter123,binding_setter123,BindTargetType.ToInProperty);
            _flow.HTTPActivity4.InDirections.Add(bind_dir123);
            VTDPropertyInfoBase pi247 = new VTDPropertyInfoBase("CITY");
            VTDBaseGetter binding_getter124 = new VTDObjectGetter(pi247);
            VTDPropertyInfoBase pi248 = new VTDPropertyInfoBase("XMLBody","/*[local-name(.)='Object'][1]/*[local-name(.)='city'][1]");
            VTDBaseSetter binding_setter124 = new VTDJsonSetter(pi248,XmlTypeCode.String);
            binding_setter124 = new StringFormaterDecorator(binding_setter124,"{DataSource.excelForward!Emprestimo.CITY}");
            bind_dir124 = new BindDirection(this.DataCursorActivity17,binding_getter124,binding_setter124,BindTargetType.ToInProperty);
            _flow.HTTPActivity4.InDirections.Add(bind_dir124);
            VTDPropertyInfoBase pi249 = new VTDPropertyInfoBase("ADDRESS1");
            VTDBaseGetter binding_getter125 = new VTDObjectGetter(pi249);
            VTDPropertyInfoBase pi250 = new VTDPropertyInfoBase("XMLBody","/*[local-name(.)='Object'][1]/*[local-name(.)='address1'][1]");
            VTDBaseSetter binding_setter125 = new VTDJsonSetter(pi250,XmlTypeCode.String);
            binding_setter125 = new StringFormaterDecorator(binding_setter125,"{DataSource.excelForward!Emprestimo.ADDRESS1}");
            bind_dir125 = new BindDirection(this.DataCursorActivity17,binding_getter125,binding_setter125,BindTargetType.ToInProperty);
            _flow.HTTPActivity4.InDirections.Add(bind_dir125);
            XmlDocument HTTPActivity4_ExpectedResponseXmlBody_Document = new XmlDocument();
            HTTPActivity4_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            HTTPActivity4_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity4.ExpectedResponseXmlBody = HTTPActivity4_ExpectedResponseXmlBody_Document;
            XmlDocument HTTPActivity4_ExpectedResponseJsonBody_Document = new XmlDocument();
            HTTPActivity4_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            HTTPActivity4_ExpectedResponseJsonBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity4.ExpectedResponseJsonBody = HTTPActivity4_ExpectedResponseJsonBody_Document;
            XmlDocument HTTPActivity4_ExpectedOutputProperties_Document = new XmlDocument();
            HTTPActivity4_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            HTTPActivity4_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion /><StatusCode>200</StatusCode><StatusDescription /><ResponseBody /><ResponseBodyAsBase64 /></Arguments>");
            _flow.HTTPActivity4.ExpectedOutputProperties = HTTPActivity4_ExpectedOutputProperties_Document;
            set_HTTPActivity4_checkpoints(_flow.HTTPActivity4);
            
        }
        
        internal void InitializeEncryptionManagerValues()
        {
        
        }
        	
    	bool useReport = true;
    
    	protected override STExecutionResult ExecuteStep()
        {
            return base.ExecuteStep();
        }
    
        public void Start()
        {
    	    try
    		{
    		  Workflow_Executing();
    		  this.ExecuteStep();
    		}
    		finally
    		{
    		  WorkFlowScript_Completed();
    		}
        }
    
    	private void InitReport()
    	{
    		if (useReport)
    		{	
    			// Intialize Reporter
    			string reportDBDir = Path.Combine(this._context.ReportDirectory, @"Report");
    			CleanupReport(reportDBDir);        	
    			string reportDBPath = Path.Combine(reportDBDir, "VTDReport.mdb");        	
    			if (reporter == null)
    			{
    				reporter = new Reporter(reportDBPath);
    			}
    			_context.Reporter = reporter;
    		}
    	}
    
        public static void CopyDirectory(string Src, string Dst)
        {
            String[] Files;
    
            if (Dst[Dst.Length - 1] != Path.DirectorySeparatorChar)
                Dst += Path.DirectorySeparatorChar;
            if (!Directory.Exists(Dst)) Directory.CreateDirectory(Dst);
            Files = Directory.GetFileSystemEntries(Src);
            foreach (string Element in Files)
            {
                // Sub directories
                if (Directory.Exists(Element))
                    CopyDirectory(Element, Dst + Path.GetFileName(Element));
                // Files in directory
                else
                    File.Copy(Element, Dst + Path.GetFileName(Element), true);
            }
        }
        
        private void CleanupReport(string reportDBDir)
        {   
    		if (useReport)
    		{             
    			string reportTemplateDir = Path.Combine(ServiceTestRunner.GetInstallPath(), "bin", "ReportResources");
    			try
    			{
            		CopyDirectory(reportTemplateDir, reportDBDir);
    			}
    			catch //(Exception ex)
    			{
    				//ToDo: LoggingService.Warn("Report Cleanup Error", ex);
    			}
    		}
        }
    
        void Workflow_Executing()
        {   
        	InitReportNode();
                       
        }
    
    	private void InitReportNode()
    	{
    		if (useReport)
    		{	
        		// Init report creator
    			this.reportCreator = new HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator();
    			this.reportLevelInTree = reportCreator.Init(_context.EnvironmentProfile.GetVariableValue("TestName"), _context);
                
    			STActivityBase activity = this;
    			string workflowID = activity.GetHashCode().ToString();
    			ReportNodeCreationData newNodeData =
    			new ReportNodeCreationData(workflowID, workflowID, DateTime.Now);
    			reporter.CreateReportNode(newNodeData);
            
    			ReportInfoData newReportData = new ReportInfoData(workflowID, ReportKeywords.TypeKeywordTag, this.GetType().ToString());
    			reporter.SendReportData(newReportData);
    			newReportData = new ReportInfoData(workflowID, ReportKeywords.NameKeywordTag, this.Name);
    			//TrackData(ReportInfoData.InfoDataTag, newReportData);
    			reporter.SendReportData(newReportData);            
            }
    	}
        
        void WorkFlowScript_Completed()
        {   
    		
    
    		CreateReportFiles();
    					
        	// Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
    
    		OnExecutionCompleted();
    		
        }
    
    	private void CreateReportFiles()
    	{
    		if (useReport)
    		{	
    			//Dispose reporter inorder to close connection to report DB
           		this._context.Reporter.Dispose();
            	
           		// Run report creator
    			reportCreator.RunOnDBAndCreateFiles();
    		}
    	}
    
        
        void Workflow_Faulting()
        {
    		
    
    		CreateReportFiles();
            // Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
           
    		OnExecutionCompleted();
        }
    
    	protected override QcSystemVariables GetRuntimeQcVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeQcVariables(this._context);
    	}
            
    	protected override TestSystemVariables GetTestSystemVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeTestVariables(this._context);
    	}
    
    	private void UpdateTestSettings(ISTRunTimeContext ctx)
        {
    		ctx.PropertyBag["StopTestOnStepFailure"] = true;
    	}
    }
    
    public partial class VuserClass
    {
    	public static string[] CommandLineArguments;
    	public static string[] DotNetResolverPaths;
    	
        public VuserClass()
        {
    				
    		AssemblyResolver.AddSTPathsToResolutionPaths();
    		AssemblyResolver.AttachToAppdomain();
        }
    
        private void AddAssemblyResolver()
        {
    		AssemblyResolver.AddTestPathToResolutionPaths(GetTestPath());
    		AssemblyResolver.AddPathsForAssemblyResolution(DotNetResolverPaths);
        }
    	
        public int STAction()
        {	
            AddAssemblyResolver();
            STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
            WorkFlowScript script = new WorkFlowScript(ctx);
            script.InitializeComponent();
            script.Start();       
            
            return 0;
        }
        
        public void NotifyLicenseException(string msg)
        {
        		
    		try
    		{
    		    STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
                WorkFlowScript script = new WorkFlowScript(ctx);
                script.InitializeComponent();
                script.Context.ReplayClient.OnLicenseFailure(msg);
                
            }
            catch (Exception)
            {
    			// ToDo: log the error message
            }        
        }
    
    	 protected string GetTestPath()
            {
                if (CommandLineArguments != null)
                {
                    for (int i = 0; i < CommandLineArguments.Length; i++)
                    {
                        if (CommandLineArguments[i].Equals("-test", StringComparison.OrdinalIgnoreCase))
                        {
                            return CommandLineArguments[i + 1];
                        }
                    }
                }
                return String.Empty;
            }
        
    }
    
    }
    